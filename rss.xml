<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>敬维</title>
    <description>一个喜欢涂涂画画的人，曾经的Rubist，一个CI/CD的践行者，一个探寻最佳实践的人。</description>
    <link>https://jingwei.link//</link>
    <atom:link href="https://jingwei.link/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 05 Oct 2019 12:52:43 +0800</pubDate>
    <lastBuildDate>Sat, 05 Oct 2019 12:52:43 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>effective go 简介、格式化与注释部分</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#简介&quot; id=&quot;markdown-toc-简介&quot;&gt;简介&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#示例代码&quot; id=&quot;markdown-toc-示例代码&quot;&gt;示例代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#格式化&quot; id=&quot;markdown-toc-格式化&quot;&gt;格式化&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#注释&quot; id=&quot;markdown-toc-注释&quot;&gt;注释&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://golang.google.cn/doc/effective_go.html&quot;&gt;effective go&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;
&lt;p&gt;Go 是一个新的编程语言。虽然它从既有的编程语言中借鉴了很多理念，但是它也有很多与众不同的特性，这使得 Go 和其他的编程语言区别开来。如果一个 Java（C++） 写的应用应用直接按照 Java（C++） 的代码逻辑转译成 Go 语言的应用程序，最后很可能得不到一个满意的效果——毕竟 Java 应用程序是用 Java 写的，里面包含了太多Java的东西，而 Java 跟 Go 比 少了很多特性，因此直接转译肯定是不合适的。换个角度来思考，从 Go 的视角分析问题并据此设计软件，最后也会得到一个独特的架构方案，此时如果把这个 Go 应用程序转译成 Java 语言等其他语言的应用程序肯定也不容易。换句话说，为了写好 Go 语言的程序，学习它的语言特性和语言规范是很重要的。而除了必须要遵循或参考的语言特性和语言规范，了解 Go 语言编程的一些人为的约定也很重要，比如命名、格式、程序构建等相关的内容，这样你写出来的程序就更容易被其他开发者理解，从而便于多人协作进行开发。&lt;/p&gt;

&lt;p&gt;本文档给出了一些 Go 语言的编码技巧。遵从这些技巧可以编写出清晰、规范的 Go 语言程序。这篇文档是“&lt;a href=&quot;https://golang.google.cn/ref/spec&quot;&gt;语言特性&lt;/a&gt;”、“&lt;a href=&quot;https://tour.golang.org/&quot;&gt;Go学习(需要科学上网)&lt;/a&gt;”和“&lt;a href=&quot;https://golang.google.cn/doc/code.html&quot;&gt;如何写 Go 程序&lt;/a&gt;”的补充内容，因此在看本文前先看看这些文档再学习本文档会更好。&lt;/p&gt;

&lt;h2 id=&quot;示例代码&quot;&gt;示例代码&lt;/h2&gt;
&lt;p&gt;Go 源码包不仅仅是 Go 的核心功能库，里面同时提供了语言特性的各种实际用法。除此之外，许多的 package 包都涵盖了可直接运行的例子，这些例子大都不包含其他的依赖库，因此可以直接在 golang.google.cn 这个网页上运行，比如 &lt;a href=&quot;https://golang.google.cn/pkg/strings/#example_Map&quot;&gt;这个&lt;/a&gt; 例子。如果你在实际开发过程中遇到一个语言特性相关或者库的应用设计甚至实现相关的问题，都可以到核心代码库搜寻一下，应该会有所收获的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://golang.google.cn/pkg/&quot;&gt;Go 源码包&lt;/a&gt; 列表。&lt;/p&gt;

&lt;h1 id=&quot;格式化&quot;&gt;格式化&lt;/h1&gt;

&lt;p&gt;代码的格式一般不影响代码的正常运行，但是因为影响到人的阅读体验，所以不同的代码风格往往导致一些争议。当然可以让任何开发者从一个风格迁移到另一个代码风格，并据此进行编码，但是最好不让开发者有这种选择的机会，试想当每个人都使用同一种编码风格进行开发时，格式化问题就不会占用大家那么多时间去适应各种风格了，相对也就节省了时间。当然理想很丰满，问题是如何在短期内快速且自然地实现这个理想。&lt;/p&gt;

&lt;p&gt;在 Go 语言中，我们可以让机器帮我们处理大部分的格式问题。程序 gofmt （也可以通过 go fmt 子命令进行调用，它会在包级别上做格式化处理，不能指定文件进行格式化，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;usage: go fmt [-n] [-x] [packages]&lt;/code&gt;，不过在 go1.13 版本是可以制定某个特定的文件的，不知道是不是哪里理解错了）读取一个 Go 代码，然后按照标准风格对代码进行缩进、垂直对齐等修改从而产生规范化的代码；这个修改的过程只限于代码，不包括注释，注释一般我们写的什么样子就是什么样子，据说也会在必要时适当重新格式化注释（如果大家遇到类似的情况欢迎分享）。如果你的代码中存在格式上的布局问题，执行 gofmt 就好了；如果使用 gofmt 的效果和预期的不一样，重新调整一下你的代码再运行一次就可以了，如果实在得不到自己想要的结果，也可以考虑给 gofmt 提交一个修改意见，总之不要在格式问题上花太多时间就对了。&lt;/p&gt;

&lt;p&gt;我们可以以结构体为例，在声明结构体的时候，对于结构体里面的字段，我们没有必要手动对齐字段名、字段类型、注释等，gofmt 可以帮我们自动实现这种对齐。比如对于有下面的声明：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// name of the object&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// its value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;gofmt 会对齐每一行的内容，结果如下：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// name of the object&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// its value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;值得关注的是，标准库中所有的 Go 源码都被 gofmt 格式化过，因此推荐大家去看看标准库中的源码，从而体会一下这种简洁的统一的美。&lt;/p&gt;

&lt;p&gt;对于 Go 语言的格式，除了上面提到的 gofmt 的妙用，其实还是有几个非常简单的细节需要大家知道：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;缩进&lt;/p&gt;

    &lt;p&gt;在 Go 语言中，缩进默认使用制表符（Tab）来缩进，这也是 gofmt 的默认做法；除非必要，否则不建议使用空格进行缩进。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每行代码的长度&lt;/p&gt;

    &lt;p&gt;Go 语言中每行的代码长度是没有限制的，因此不用担心长度溢出的问题；当然如果一行代码太长了，可以考虑手动换行，建议在新行前面添加一些 Tab 符来示意它和上一行是有关系的，便于阅读。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;括号&lt;/p&gt;

    &lt;p&gt;与 C 和 Java 相比较， Go 语言只需要少量的括号就能实现很多功能：在控制结构 if、for、switch 的声明中不需要把语句括起来就能正常运行。同时，操作符预定义的优先级也很简短明了，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&amp;lt;&amp;lt;8 + y&amp;lt;&amp;lt;16&lt;/code&gt; 其中空格的存在就已经暗示了计算的优先级（空格经由 &lt;code class=&quot;highlighter-rouge&quot;&gt;gofmt&lt;/code&gt; 格式化时会自动添加，开发者不需要特别关注这里的空格）。&lt;/p&gt;

    &lt;p&gt;比如下面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环的代码:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;注释&quot;&gt;注释&lt;/h1&gt;

&lt;p&gt;Go 语言提供了 C 语言风格里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/* */&lt;/code&gt; &lt;strong&gt;块注释&lt;/strong&gt;和 C++ 语言风格里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; &lt;strong&gt;行注释&lt;/strong&gt;。这两种注释风格中，行注释是主要的注释方式，块注释的风格更多地用在包注释的场合，但是块注释还有一个用处，就是在行内表达式间使用，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Println(1&amp;lt;&amp;lt;8 /* 这里刻意注释一段话，打印 260 */ + 1&amp;lt;&amp;lt;2)&lt;/code&gt;；当然，当临时删除大块的代码的时候用块注释的方式也很方便。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;godoc&lt;/code&gt; 是一个程序，同时也是一个 Web 服务器，它能从 Go 源码文件中提取各个 package 包里的文档。在包级别作用域的声明语句前直接出现的注释语句（注释和代码之间不能有空格行）会和声明语句一起被抽取出来作为相应条目的文档文本。因此源码中注释的具体内容及其排版风格直接决定了 godoc 生成的文档的质量。&lt;/p&gt;

&lt;p&gt;【注】：可通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;go get -v golang.org/x/tools/cmd/godoc&lt;/code&gt; 安装 godoc 命令。&lt;/p&gt;

&lt;p&gt;每个包都应该在包声明前包含一个块注释用来介绍包的功能——即包注释。如果一个包存在很多个文件，只需在任何一个文件中包含包注释就可以了。包注释应该介绍包的功能并提供整个包相关的信息。因为包注释会出现在 godoc 最前面的页面上，因此应该设置紧随其后的详细文档。下面给出了 &lt;code class=&quot;highlighter-rouge&quot;&gt;regexp&lt;/code&gt; 这个包的注释示例，其首先介绍了 &lt;code class=&quot;highlighter-rouge&quot;&gt;regexp&lt;/code&gt; 包的主要功能，然后马上给出了其正则表达式的语法。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/*
Package regexp implements a simple library for regular expressions.

The syntax of the regular expressions accepted is:

    regexp:
        concatenation { '|' concatenation }
    concatenation:
        { closure }
    closure:
        term [ '*' | '+' | '?' ]
    term:
        '^'
        '$'
        '.'
        character
        '[' [ '^' ] character-ranges ']'
        '(' regexp ')'
*/&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果一个包的功能非常简单，包注释也可以简化成为行注释，比如下面 &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; 包的注释：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Package path implements utility routines for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// manipulating slash-separated filename paths.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Go 语言的注释里不需要附加格式符号，比如不需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;**something**&lt;/code&gt; 这种加粗强调的语法。由于自动生成的文档甚至没有固定宽度的字体，因此也不要试图通过空格来对齐某些内容；和前面讲的 gofmt 一样，godoc 会自动处理这些情况。在 Go 语言中，注释是未经特别解析的纯文本，HTML 和其他的注解，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;_this_&lt;/code&gt; 会把每个字符重新打印出来 &lt;code class=&quot;highlighter-rouge&quot;&gt;_this_&lt;/code&gt;，因此不应该使用这些特殊的样式。godoc 会用固定宽度的字体表示缩进，因此可以非常完美地展示注释中的代码片段；在核心代码库中，包 &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt&lt;/code&gt; 的&lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.13/src/fmt/doc.go&quot;&gt;包注释&lt;/a&gt;就很好地利用了这个特性。&lt;/p&gt;

&lt;p&gt;godoc 会根据上下文来决策要不要重新格式化注释，因此请确认你的注释看上去已经很不错了，比如使用正确的拼写、合适的标点符号、简洁的句子结构，折叠过长的句子，等等。&lt;/p&gt;

&lt;p&gt;包中任何一个在顶层声明（在包作用域的声明）之前的注释均被认为是相应声明的注释文档，会被 godoc 自动抽取展示出来。程序中每一个导出的名字（首字母大写的名称，包括常量、变量、函数、方法等）都应该有一个注释文档，从而方便其他库引用这个名字时知道这个名字的具体含义。&lt;/p&gt;

&lt;p&gt;注释文档最好是一个完整的句子，这可以增加展示方式的灵活度。同时，注释文档的第一句最好是对应名称的一句话总结。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Compile parses a regular expression and returns, if successful,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// a Regexp that can be used to match against text.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果每个注释文档的第一个单词都是它的描述对象，开发者就可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;go&lt;/code&gt; 命令行工具的子命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;doc&lt;/code&gt; 生成文档然后使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; 查验想要寻找的内容。比如你想不起来名称 &lt;code class=&quot;highlighter-rouge&quot;&gt;Compile&lt;/code&gt; 了，但是想找正则表达式的&lt;strong&gt;解析&lt;/strong&gt;函数，此时你可以运行下面的命令找到相应的内容：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go doc &lt;span class=&quot;nt&quot;&gt;-all&lt;/span&gt; regexp | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; parse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果所有的包注释文档都是 ”this function …” 开始的，grep 过滤帮你找不到相应的名称。但正因为 regexp 包里每个名称的注释的第一个单词都是对应的名称，因此使用 grep 过滤的时候很容易就能看到这个名称，从而让你找到你想要的单词。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go doc &lt;span class=&quot;nt&quot;&gt;-all&lt;/span&gt; regexp | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; parse
    Compile parses a regular expression and returns, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;successful, a Regexp
    MustCompile is like Compile but panics &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;the expression cannot be parsed.
    parsed. It simplifies safe initialization of global variables holding
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Go 的声明语法允许对一组变量进行声明，然后可以用单个注释文档介绍这一组常量或者变量。当然，这种注释内容往往比较笼统。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Error codes returned by failures to parse an expression.（表达式解析失败的错误码）&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrInternal&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;regexp: internal error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrUnmatchedLpar&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;regexp: unmatched '('&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrUnmatchedRpar&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;regexp: unmatched ')'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;组&lt;/strong&gt;也可用来暗示某几个名词之间的某种关联关系，比如下面的代码声明了一个 mutex 以及由它保护的一组变量。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countLock&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputCount&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputCount&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorCount&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chalvern/books/tree/master/golang/official_go_learning&quot;&gt;原汁原味 Go 语言学习(教案)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/av70108449&quot;&gt;本文的 bilibili 视频地址&lt;/a&gt; 欢迎转发分享😆&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 04 Oct 2019 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2019/10/04/effectivego-intro-format-commentary.html</link>
        <guid isPermaLink="true">https://jingwei.link/2019/10/04/effectivego-intro-format-commentary.html</guid>
        
        <category>golang</category>
        
        <category>基础</category>
        
        <category>实用</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>【图示】控制 Goroutine 的并发数量的方式</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#控制-goroutine-的数量&quot; id=&quot;markdown-toc-控制-goroutine-的数量&quot;&gt;控制 Goroutine 的数量&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#先看-goroutine-数量不受控制的代码例一&quot; id=&quot;markdown-toc-先看-goroutine-数量不受控制的代码例一&quot;&gt;先看 Goroutine 数量不受控制的代码（例一）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#goroutine-数量不受控制的图示&quot; id=&quot;markdown-toc-goroutine-数量不受控制的图示&quot;&gt;Goroutine 数量不受控制的图示&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#goroutine-数量受到限制的图示&quot; id=&quot;markdown-toc-goroutine-数量受到限制的图示&quot;&gt;Goroutine 数量受到限制的图示&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#控制-goroutine-数量的代码例二&quot; id=&quot;markdown-toc-控制-goroutine-数量的代码例二&quot;&gt;控制 Goroutine 数量的代码（例二）&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;在 Go 语言中创建协程（Goroutine）的成本非常低，因此稍不注意就可能创建出大量的协程，一方面会造成资源的浪费，另一方面不容易控制这些协程的状态。&lt;/p&gt;

&lt;p&gt;不过，“能力越大，越需要克制”。网络上已经存在一些讲控制 Goroutine 数目的文章，本文通过图示的方式再简单总结一下其基本理念，以便于记忆。&lt;/p&gt;

&lt;h2 id=&quot;控制-goroutine-的数量&quot;&gt;控制 Goroutine 的数量&lt;/h2&gt;
&lt;h3 id=&quot;先看-goroutine-数量不受控制的代码例一&quot;&gt;先看 Goroutine 数量不受控制的代码（例一）&lt;/h3&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobsCount&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WaitGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobsCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello %d!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 刻意睡 1 秒钟，模拟耗时&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index: %d,goroutine Num: %d &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumGoroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码假设有 &lt;code class=&quot;highlighter-rouge&quot;&gt;jobsCount&lt;/code&gt; 个任务，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;for-range&lt;/code&gt; 给每个任务创建了一个 Goroutine。为了让主协程等待所有的子协程执行完毕后再退出，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sync.WaitGroup&lt;/code&gt; 监控所有协程的状态，从而保证主协程结束时所有的子协程已经退出。为了说明问题，上面的代码还输出了 &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.NumGoroutine()&lt;/code&gt; 的值用以表征协程的数量。&lt;/p&gt;

&lt;p&gt;运行上面的代码，可以得到类似下面的输出。从下面的输出中我们可以得到两点信息：① 协程的执行顺序是随机的（比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello 3&lt;/code&gt; 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello 4&lt;/code&gt; 后面出现）；② 协程的数量递增，最后竟达到了 11 个之多。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello 0!
index: 0,goroutine Num: 2 
index: 1,goroutine Num: 3 
hello 1!
index: 2,goroutine Num: 4 
hello 2!
index: 3,goroutine Num: 5 
index: 4,goroutine Num: 6 
index: 5,goroutine Num: 7 
index: 6,goroutine Num: 8 
hello 4!
hello 5!
hello 3!
hello 7!
index: 7,goroutine Num: 9 
index: 8,goroutine Num: 10 
index: 9,goroutine Num: 11 
hello 8!
hello 9!
hello 6!
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;goroutine-数量不受控制的图示&quot;&gt;Goroutine 数量不受控制的图示&lt;/h3&gt;

&lt;p&gt;我们应该怎么理解&lt;strong&gt;例一&lt;/strong&gt;的代码呢？&lt;/p&gt;

&lt;p&gt;假如 CPU 只有&lt;strong&gt;两个&lt;/strong&gt; 核，下图展示了为每个 job 创建一个 goroutine 的情况（换句话说，goroutine 的数量是不受控制的）。此种情况虽然生成了很多的 goroutine，但是&lt;strong&gt;每个 CPU 核上同一时间只能执行一个 goroutine&lt;/strong&gt;；当 job 很多且生成了相应数目的 goroutine 后，会出现很多等待执行的 goroutine，从而造成资源上的浪费。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/figure-goroutine-controll-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;goroutine-数量受到限制的图示&quot;&gt;Goroutine 数量受到限制的图示&lt;/h3&gt;

&lt;p&gt;给每个 job 生成一个 goroutine 的方式显得粗暴了很多，那么可以通过什么样的方式控制 goroutine 的数目呢？其实“&lt;strong&gt;例一&lt;/strong&gt;”小节的代码通过一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;for-range&lt;/code&gt; 循环完成了两件事情：①为每个 job 创建 goroutine；②把任务相关的标识传给相应的 goroutine 执行。为了控制 goroutine 的数目，完全可以把上面的两个过程拆分开：a）先通过一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;for-range&lt;/code&gt; 循环创建指定数目的 goroutine，b）然后通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;buffered channel&lt;/code&gt; 给每个 goroutine 传递任务相关的信息（这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt;是否缓冲无所谓，主要用到的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt; 的线程安全特性）。如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/figure-goroutine-controll-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;控制-goroutine-数量的代码例二&quot;&gt;控制 Goroutine 数量的代码（例二）&lt;/h3&gt;
&lt;p&gt;代码实现上也很简单：一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;for-range&lt;/code&gt; 创建指定数目的 goroutine，另一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;for-range&lt;/code&gt; 把 job 依次推送到 &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt; 供 goroutine 消费。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobsCount&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WaitGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobsChan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// a) 生成指定数目的 goroutine，每个 goroutine 消费 jobsChan 中的数据&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poolCount&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poolCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobsChan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// b) 把 job 依次推送到 jobsChan 供 goroutine 消费&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobsCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobsChan&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index: %d,goroutine Num: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumGoroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行上面的代码可以得到下面类似的输出（&lt;strong&gt;可以看到 goroutine 的数量控制在了 4 个&lt;/strong&gt;）。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;index: 0,goroutine Num: 4
index: 1,goroutine Num: 4
hello 1
index: 2,goroutine Num: 4
index: 3,goroutine Num: 4
index: 4,goroutine Num: 4
hello 2
index: 5,goroutine Num: 4
hello 0
hello 3
hello 4
hello 5
index: 6,goroutine Num: 4
index: 7,goroutine Num: 4
index: 8,goroutine Num: 4
hello 6
hello 7
index: 9,goroutine Num: 4
hello 8
hello 9
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文通过图示的方式总结了控制 goroutine 数目的一种简单方式，简单来讲就是：①通过一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;for-range&lt;/code&gt; 创建指定数目的 goroutine，② 通过另一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;for-range&lt;/code&gt; 把 job 依次推送到 &lt;code class=&quot;highlighter-rouge&quot;&gt;channel&lt;/code&gt; 供第一步生成的 goroutine 消费。&lt;/p&gt;

&lt;p&gt;为了说明问题，代码示例中输出了 &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.NumGoroutine()&lt;/code&gt;（即 gouroutine 的数目）的变化，便于大家更直观地观察效果。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.eddycjy.com/golang/talk/control-goroutine.html&quot;&gt;1.6 来，控制一下 goroutine 的并发数量 · 跟煎鱼学 Go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jingwei.link/2019/05/26/golang-routine-scheduler.html&quot;&gt;Golang 并发问题（五）goroutine 的调度及抢占 - 敬维&lt;/a&gt; 之前总结的一篇 goroutine 调度与抢占的文章&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chalvern/gochan&quot;&gt;GitHub - chalvern/gochan: pool of goroutine with buffer channel, for concurrent execution but events of individual object running sequentially&lt;/a&gt; 基于同样的原理实现的一个小工具，不过每个 goroutine 监听自己的 channel，并通过一个分发器（dispatcher）把任务分发到特定的 channel 中（因为考虑到有些任务前后可能是有关联的）。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 13 Sep 2019 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2019/09/13/conotrol-goroutines-count.html</link>
        <guid isPermaLink="true">https://jingwei.link/2019/09/13/conotrol-goroutines-count.html</guid>
        
        <category>golang</category>
        
        <category>实用</category>
        
        <category>基础</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>搭建免费的个人博客（一）——简单静态页面型</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#适用人群&quot; id=&quot;markdown-toc-适用人群&quot;&gt;适用人群&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#博客的三种表现形式&quot; id=&quot;markdown-toc-博客的三种表现形式&quot;&gt;博客的三种表现形式&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#一最简单的博客可以只有一个静态页面&quot; id=&quot;markdown-toc-一最简单的博客可以只有一个静态页面&quot;&gt;一、最简单的博客可以只有一个静态页面&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#二稍复杂的博客是很多静态页面&quot; id=&quot;markdown-toc-二稍复杂的博客是很多静态页面&quot;&gt;二、稍复杂的博客是很多静态页面&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#三内容可动态渲染的博客系统&quot; id=&quot;markdown-toc-三内容可动态渲染的博客系统&quot;&gt;三、内容可动态渲染的博客系统&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#搭建只有一个静态页面的博客&quot; id=&quot;markdown-toc-搭建只有一个静态页面的博客&quot;&gt;搭建只有一个静态页面的博客&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-注册-github-账号&quot; id=&quot;markdown-toc-1-注册-github-账号&quot;&gt;1. 注册 github 账号&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-创建一个新仓库new-repository&quot; id=&quot;markdown-toc-2-创建一个新仓库new-repository&quot;&gt;2. 创建一个新仓库（new repository）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-创建-indexhtml-文件并黏贴-html-静态内容&quot; id=&quot;markdown-toc-3-创建-indexhtml-文件并黏贴-html-静态内容&quot;&gt;3. 创建 index.html 文件并黏贴 html 静态内容&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-通过-jianzhoubiangithubio-地址访问博客&quot; id=&quot;markdown-toc-4-通过-jianzhoubiangithubio-地址访问博客&quot;&gt;4. 通过 jianzhoubian.github.io 地址访问博客&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-配置私人域名在-github-中设置项目相关项&quot; id=&quot;markdown-toc-5-配置私人域名在-github-中设置项目相关项&quot;&gt;5. 配置私人域名——在 github 中设置项目相关项&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6-配置私人域名配置域名解析&quot; id=&quot;markdown-toc-6-配置私人域名配置域名解析&quot;&gt;6. 配置私人域名——配置域名解析&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#7-通过-tuijianzhoubiancom-地址访问博客&quot; id=&quot;markdown-toc-7-通过-tuijianzhoubiancom-地址访问博客&quot;&gt;7. 通过 tui.jianzhoubian.com 地址访问博客&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;我很早就想搭建一个自己专属的博客页面，但是一直拖到2018年才真正把《&lt;a href=&quot;https://jingwei.link&quot;&gt;jingwei.link&lt;/a&gt;》搭建起来。之所以拖那么久，现在来看主要还是①对相关的技术理解不到位，复杂化整个流程从而放弃；而②网络上缺少简单易懂的相关教程。&lt;/p&gt;

&lt;p&gt;作为一名 IT 从业人员，我个人非常推荐每一位同行（尚未就业的大学生也很有必要）都能够维护一个自己的博客页面，并能够在自己的这个“小天地”里坚持研究自己感兴趣的领域知识；如此，无疑会对个人的发展起到很大的积极作用。（欢迎加qq群 376482175 交流，备注“jingwei.link” 即可）。&lt;/p&gt;

&lt;h2 id=&quot;适用人群&quot;&gt;适用人群&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;入门√&lt;/strong&gt;——初级——中级——高级，本文适合所有对技术感兴趣的开发者。&lt;/p&gt;

&lt;h2 id=&quot;博客的三种表现形式&quot;&gt;博客的三种表现形式&lt;/h2&gt;
&lt;h3 id=&quot;一最简单的博客可以只有一个静态页面&quot;&gt;一、最简单的博客可以只有一个静态页面&lt;/h3&gt;
&lt;p&gt;是的，简单的博客可以只有一个静态页面，我们的个人博客也可以从一个静态页面开始进而逐渐变得丰富多彩。&lt;/p&gt;

&lt;p&gt;我们完全可以①手动写一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; &lt;strong&gt;静态页面&lt;/strong&gt;，然后②把这个页面托管到公共平台（比如 github）或者私有服务器（比如在阿里云、腾讯云等购买私有的云服务器），③用户只需通过 http(s) 协议拿到这个&lt;strong&gt;静态页面&lt;/strong&gt;并在浏览器中正常展示，此时我们的博客就算搭建完成了。&lt;/p&gt;

&lt;p&gt;如果我们的目标仅仅是搭建这么一个最简单的博客，问题就变成了：&lt;strong&gt;如何通过固定的网址（比如 https://chalvern.github.io）获取一个 HTML 静态页面&lt;/strong&gt;。这个问题很简单，看完本文就知道怎么做了。&lt;/p&gt;

&lt;h3 id=&quot;二稍复杂的博客是很多静态页面&quot;&gt;二、稍复杂的博客是很多静态页面&lt;/h3&gt;
&lt;p&gt;如果是记录自己的技术总结的博客，可能一个页面无法承载自己的所有总结，此时就会写很多很多的静态页面。&lt;/p&gt;

&lt;p&gt;此时，一般的做法是用一个 HTML 页面以列表的形式&lt;strong&gt;超链接&lt;/strong&gt;所有的内容页面，比如打开 &lt;a href=&quot;https://jingwei.link&quot;&gt;https://jingwei.link&lt;/a&gt; 是一个首页，通过这个首页可以超链接到具体的内容页面去。&lt;/p&gt;

&lt;p&gt;对比第一种最简单的博客，如果我们的目标是搭建一个稍复杂的博客，问题就变成了：&lt;strong&gt;① 如何有效地组织所有的内容页面，从而方便读者超链接到对应的静态页面；②如何通过固定的网址获取得到这些静态页面（和第一种遇到的问题相似）&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;业界比较有名的 &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;、&lt;a href=&quot;https://www.gohugo.org&quot;&gt;Hugo&lt;/a&gt;、&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;Hexo&lt;/a&gt;等博客框架(分别对应 Ruby、Golang、Nodejs 技术栈)都能很好地解决第①个问题，大家完全可以按照喜好选择自己使用哪个框架（未来我可能会介绍一下 JekyII 和 Hugo）。&lt;/p&gt;

&lt;h3 id=&quot;三内容可动态渲染的博客系统&quot;&gt;三、内容可动态渲染的博客系统&lt;/h3&gt;
&lt;p&gt;静态页面的博客发布后，除非我们再一次发布新的静态页面，否则博客的内容是不会变化的。&lt;/p&gt;

&lt;p&gt;进一步，可以做一个能够动态渲染页面的博客系统，把内容保存在数据库中，当用户访问博客时内容①从数据库中加载，然后②被框架渲染成页面进而展示出来。通过修改数据库中的内容，可以动态改变博客的内容从而避免了发版。不过，&lt;strong&gt;因为数据库和渲染引擎的存在，这种动态渲染的博客系统的部署成本和运维成本都很高&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这类博客所涉及到的技术问题比较多，需要更多的专业知识，除非知道自己在做什么，否则不推荐大家采取这种方式。另外，未来我可能会开源一套基于 Golang 语言的类似系统，敬请期待吧:)&lt;/p&gt;

&lt;h2 id=&quot;搭建只有一个静态页面的博客&quot;&gt;搭建只有一个静态页面的博客&lt;/h2&gt;
&lt;p&gt;本小节侧重解决这个问题：&lt;strong&gt;如何通过固定的网址（比如 &lt;a href=&quot;https://jianzhoubian.github.io&quot;&gt;https://jianzhoubian.github.io&lt;/a&gt; 和 &lt;a href=&quot;https://tui.jianzhoubian.com&quot;&gt;https://tui.jianzhoubian.com&lt;/a&gt;）获取一个 HTML 静态页面&lt;/strong&gt;。本博文使用的是 &lt;a href=&quot;https://github.io&quot;&gt;github.io&lt;/a&gt; 的服务，即把我们写好的静态页面托管到 github.io 供用户访问。&lt;/p&gt;

&lt;h3 id=&quot;1-注册-github-账号&quot;&gt;1. 注册 github 账号&lt;/h3&gt;
&lt;p&gt;为了使用 github.io 的服务，首先免费注册一个 &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; 账号（如果已经有账号，跳过本步骤即可）。&lt;/p&gt;

&lt;p&gt;需要事先准备一个邮箱在注册账号时使用。邮箱认证完成以后，github 的账号就可以使用了。&lt;/p&gt;

&lt;h3 id=&quot;2-创建一个新仓库new-repository&quot;&gt;2. 创建一个新仓库（new repository）&lt;/h3&gt;
&lt;p&gt;登录第一步注册的 github 账号，然后通过 &lt;a href=&quot;https://github.com/new&quot;&gt;new repository&lt;/a&gt; 创建一个新的仓库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/free-static-blog-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，这一步需要注意的是，仓库名称必须是 &lt;code class=&quot;highlighter-rouge&quot;&gt;“Owner 名”.github.io&lt;/code&gt; 这样的组合，图示中 Owner 名为 &lt;strong&gt;jianzhoubian&lt;/strong&gt;（荐周边），因此仓库名称为 &lt;strong&gt;jianzhoubian.github.io&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;点击创建仓库（Create repository）后，目标仓库就建成了。&lt;/p&gt;

&lt;h3 id=&quot;3-创建-indexhtml-文件并黏贴-html-静态内容&quot;&gt;3. 创建 index.html 文件并黏贴 html 静态内容&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/free-static-blog-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 文件 并贴入写好的 html 内容，然后提交保存即可。之所以取名 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;，是因为 WWW 服务器默认会把名称为 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 作为首页地址返回给用户。&lt;/p&gt;

&lt;h3 id=&quot;4-通过-jianzhoubiangithubio-地址访问博客&quot;&gt;4. 通过 jianzhoubian.github.io 地址访问博客&lt;/h3&gt;
&lt;p&gt;做完第 3 步，就可以通过仓库地址名（&lt;a href=&quot;https://jianzhoubian.github.io&quot;&gt;jianzhoubian.github.io&lt;/a&gt;）访问博客内容了。&lt;/p&gt;

&lt;p&gt;如果大家细心可以发现域名中包含了 &lt;strong&gt;github.io&lt;/strong&gt; 后缀， 其实我们完全可以在对应仓库的设置（Setting）中配置自己的私人域名（私人域名需要自己购买，费用在几元到几十元不等，&lt;a href=&quot;https://wanwang.aliyun.com&quot;&gt;阿里云&lt;/a&gt;、&lt;a href=&quot;https://dnspod.cloud.tencent.com/&quot;&gt;腾讯云&lt;/a&gt;等知名云服务提供商目前都可以买域名）。&lt;/p&gt;

&lt;p&gt;接下来尝试把 jianzhoubian.github.io 配置到 tui.jianzhoubian.com（下面的内容默认大家有自己的域名，购买域名比较简单，只要记住价格——几元到几十元，多于这个价格可能买了其他的服务）。&lt;/p&gt;

&lt;h3 id=&quot;5-配置私人域名在-github-中设置项目相关项&quot;&gt;5. 配置私人域名——在 github 中设置项目相关项&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/free-static-blog-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，首先 &lt;strong&gt;1）&lt;/strong&gt;点击 Settings 进入项目的设置页面（图示以 jianzhoubian.github.io 为例），接着 &lt;strong&gt;2）&lt;/strong&gt;找到 &lt;strong&gt;GitHub Pages -&amp;gt; Custom domain&lt;/strong&gt; 的位置，然后 &lt;strong&gt;3）&lt;/strong&gt;填写自己的私人域名地址即可（我买了 jianzhoubian.com 这个域名，图示填入了 &lt;strong&gt;tui.jianzhoubian.com&lt;/strong&gt;，之所以用 &lt;strong&gt;tui&lt;/strong&gt; 这个前缀，取“&lt;strong&gt;推&lt;/strong&gt;荐周边”的意思）。&lt;/p&gt;

&lt;p&gt;说明：配置了自己的域名后，默认是 http 协议访问，其实我们可以配置 https 协议（更安全和专业）。大家注意上图 &lt;strong&gt;Enforce HTTPS&lt;/strong&gt; 的内容，这个 &lt;strong&gt;Enforce HTTPS&lt;/strong&gt; 的按钮就是&lt;strong&gt;强制 https&lt;/strong&gt; 访问的意思。刚刚配置私有域名后，因为 github 在帮忙申请证书&lt;strong&gt;Enforce HTTPS&lt;/strong&gt; 可能不能勾选，一般等一段时间（几分钟到几个小时不等）就可以了，大家可以不要慌。&lt;/p&gt;

&lt;h3 id=&quot;6-配置私人域名配置域名解析&quot;&gt;6. 配置私人域名——配置域名解析&lt;/h3&gt;
&lt;p&gt;配置域名解析需要在购买域名的云平台进行操作。如果域名是在&lt;a href=&quot;https://wanwang.aliyun.com&quot;&gt;阿里云&lt;/a&gt;买的就在阿里云操作，如果域名是在&lt;a href=&quot;https://dnspod.cloud.tencent.com/&quot;&gt;腾讯云&lt;/a&gt;买的就在腾讯云操作，以此类推。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/free-static-blog-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，我们只需要配置一个 CNAME 类型的解析，其中 &lt;strong&gt;主机记录&lt;/strong&gt;值是我们上一步在 github 中配置的 &lt;strong&gt;tui.jianzhoubian.com&lt;/strong&gt;（二者必须一致），&lt;strong&gt;记录值&lt;/strong&gt;则是我们的项目名称&lt;strong&gt;jianzhoubian.github.io&lt;/strong&gt;。填好后点击确认，等待几分钟就可以通过 &lt;strong&gt;tui.jianzhoubian.com&lt;/strong&gt; 访问我们的博客了。&lt;/p&gt;

&lt;h3 id=&quot;7-通过-tuijianzhoubiancom-地址访问博客&quot;&gt;7. 通过 tui.jianzhoubian.com 地址访问博客&lt;/h3&gt;
&lt;p&gt;做完第 6 步，就可以通过仓库地址名（&lt;a href=&quot;https://tui.jianzhoubian.com&quot;&gt;tui.jianzhoubian.com&lt;/a&gt;）访问博客内容了。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;在浏览器中访问的博客页面，归根结底属于 html 页面。换句话讲，只要大家精通 html 的生成方法，然后按照上面的步骤把相应的 html 文件托管到 Github 上就可以拥有自己的博客了。html 的生成方法有很多，比如：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;手动编码 html 文件；&lt;/li&gt;
  &lt;li&gt;利用 JekyII、Hugo 等博客框架把 markdown 文件转换成 html 文件（&lt;strong&gt;推荐此种方式&lt;/strong&gt;）；&lt;/li&gt;
  &lt;li&gt;利用 vuejs、reactjs 等专业的前端框架渲染 html 文件；&lt;/li&gt;
  &lt;li&gt;其他。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本文简单介绍了搭建&lt;strong&gt;简单静态页面型&lt;/strong&gt;的方法，通过把静态页面托管到 github 以域名 &lt;a href=&quot;https://jianzhoubian.github.io&quot;&gt;jianzhoubian.github.io&lt;/a&gt; 的方式供所有人浏览；为了增加博客的独特性，本文还介绍了配置私有域名 &lt;a href=&quot;https://tui.jianzhoubian.com&quot;&gt;tui.jianzhoubian.com&lt;/a&gt; 的方法。希望能够帮大家顺利搭建自己的博客。&lt;/p&gt;

&lt;p&gt;如果大家对文章内容有任何疑问，欢迎邮件联系我，或者加qq群 376482175 进行交流 :)&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/06/08/how-to-build-a-blog-web.html&quot;&gt;如果你想搭建一个很随意的博客 - 敬维&lt;/a&gt; 之前笼统地写的搭建博客的几个点&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/09/01/internet-a-request-route.html&quot;&gt;《白话互联网技术》之一个请求的链路 - 敬维&lt;/a&gt; 介绍了互联网请求的链路&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/08/01/git-foundation-of-foundation.html&quot;&gt;git使用基础 - 敬维&lt;/a&gt; 介绍了 git 的几个基础使用命令&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Aug 2019 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2019/08/25/free-static-blog.html</link>
        <guid isPermaLink="true">https://jingwei.link/2019/08/25/free-static-blog.html</guid>
        
        <category>实用</category>
        
        <category>经验</category>
        
        <category>自己</category>
        
        
        <category>经验</category>
        
      </item>
    
      <item>
        <title>麻将游戏后端架构里的多并发模型</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#汇闲麻将的后端架构&quot; id=&quot;markdown-toc-汇闲麻将的后端架构&quot;&gt;汇闲麻将的后端架构&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#信息收集&quot; id=&quot;markdown-toc-信息收集&quot;&gt;信息收集&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#三个要求&quot; id=&quot;markdown-toc-三个要求&quot;&gt;三个要求&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#汇闲麻将后台中的核心对象&quot; id=&quot;markdown-toc-汇闲麻将后台中的核心对象&quot;&gt;汇闲麻将后台中的核心对象&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#需要考虑的几个关键问题&quot; id=&quot;markdown-toc-需要考虑的几个关键问题&quot;&gt;需要考虑的几个关键问题&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#历史经验&quot; id=&quot;markdown-toc-历史经验&quot;&gt;历史经验&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#信息分析与结论&quot; id=&quot;markdown-toc-信息分析与结论&quot;&gt;信息分析与结论&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#汇闲麻将后端架构里的并发模型&quot; id=&quot;markdown-toc-汇闲麻将后端架构里的并发模型&quot;&gt;汇闲麻将后端架构里的并发模型&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;受到政策因素影响，经历了近三个月封闭开发的&lt;strong&gt;汇闲麻将&lt;/strong&gt;最终还是没能成功上线。当前的感悟，创业的路上有很多槛，技术研发只是其中的一个槛。&lt;/p&gt;

&lt;p&gt;这里仅以一名程序员的角色总结一下&lt;strong&gt;汇闲麻将&lt;/strong&gt;的后端架构，也算是给过去三个月的自己一个交代。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/huixian-mahjong-server-summary-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;汇闲麻将的后端架构&quot;&gt;汇闲麻将的后端架构&lt;/h2&gt;
&lt;h3 id=&quot;信息收集&quot;&gt;信息收集&lt;/h3&gt;
&lt;p&gt;就我个人的方法论，拿到一个问题后，① 首先要做的是尽可能多地收集情报，② 然后分析情报，有必要的情况下还要进一步收集情报，③ 接着才是制定方案，④ 最后实施方案。&lt;/p&gt;

&lt;h4 id=&quot;三个要求&quot;&gt;三个要求&lt;/h4&gt;
&lt;p&gt;在后端架构初期，负责产品的同事就给后端的架构提了三个老生常谈的要求：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;支持高并发（单台服务器至少大几百并发）&lt;/li&gt;
  &lt;li&gt;高可扩展性（方便产品迭代添加新特性）&lt;/li&gt;
  &lt;li&gt;支持平行扩容（多台服务器同时提供服务）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;汇闲麻将后台中的核心对象&quot;&gt;汇闲麻将后台中的核心对象&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;玩家&lt;/strong&gt;：每一个进到游戏中的用户都是玩家，当然也包含陪真人玩家打牌的机器人玩家；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;牌桌&lt;/strong&gt;：每 4 个玩家加入到一个牌桌进行游戏；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;大厅&lt;/strong&gt;：每个玩家进入游戏后，会首先到达大厅，参与转盘、签到、每日任务等功能；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;其他&lt;/strong&gt;：其他一些小的对象，比如麻将、色子等，这些就都比较容易处理了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;需要考虑的几个关键问题&quot;&gt;需要考虑的几个关键问题&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;同一个玩家的不同操作需要是保序的，比如用户登录后才可以进行入牌桌的动作；&lt;/li&gt;
  &lt;li&gt;同一个牌桌上进行的操作也需要是保序的，比如入桌顺序、出牌顺序等；&lt;/li&gt;
  &lt;li&gt;需要控制协程（goroutine）的数量，避免恶性增长资源耗尽；&lt;/li&gt;
  &lt;li&gt;需要监控牌桌信息，采样牌桌状态从而便于查错；&lt;/li&gt;
  &lt;li&gt;玩家的断线重连，游戏状态的恢复；&lt;/li&gt;
  &lt;li&gt;机器人玩家的开发；&lt;/li&gt;
  &lt;li&gt;其他。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面的几个问题并未涉及到麻将游戏的具体逻辑（比如算输赢、算番数等），架构做好后可以填充这些逻辑。&lt;/p&gt;

&lt;h4 id=&quot;历史经验&quot;&gt;历史经验&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;为了避免并发问题，传统的麻将游戏后端，每个房间一个进程；例如菜鸟场、富豪场，每个场都是一个房间，房间里包含许多的牌桌，这些牌桌上的逻辑由一个进程轮转处理。&lt;/li&gt;
  &lt;li&gt;每个房间启动一个进程，并暴露对应的端口供客户端连接。&lt;/li&gt;
  &lt;li&gt;用户进入游戏的的逻辑步骤是这样的：① 用户首先登陆到登陆服务器进行登陆鉴权；② 用户拿着鉴权得到的秘钥连接到大厅服务器，进行转盘、签到、任务、选择房间入桌等操作；③ 用户选择房间后，连接具体的房间服务器（游戏服务器）进行游戏；④ 用户进行完游戏后，与游戏服务器断开，重新与大厅服务器建立连接，回到步骤②。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;信息分析与结论&quot;&gt;信息分析与结论&lt;/h3&gt;
&lt;p&gt;由于我的技术栈是 Golang，因此选定了 Golang 作为汇闲麻将的后端开发语言，分析问题的时候自然就带入了 Golang 的语言特性。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;受开发资源（时间和人力）的限制，不拆分登录、大厅、游戏等模块，在一个代码库中进行开发，方便把控研发节奏，降低前期的运维难度；&lt;/li&gt;
  &lt;li&gt;同样的道理，游戏服暂不按照房间进行进程上的划分，所有的房间都在一个主进程下面（启用 Golang 的多线程特性），对房间里的牌桌进行动态调整（如果某个房间里的牌桌不够用，而其他房间里闲置的牌桌比较多，就临时“借一个”使用）。&lt;/li&gt;
  &lt;li&gt;每个牌桌挂一个 goroutine 处理牌桌上的信息（牌桌状态轮转、用户出牌吃牌等）；&lt;/li&gt;
  &lt;li&gt;大厅的交互频次较低，只需挂一个 gotoutine 处理所有用户的相关动作；&lt;/li&gt;
  &lt;li&gt;玩家断线重连时，通过替代底层的 session 进行恢复；&lt;/li&gt;
  &lt;li&gt;数据入库时由专门的 goroutine 池负责写入，从而避免对游戏逻辑的阻塞（为此还专门写了开源项目 &lt;a href=&quot;https://github.com/chalvern/gochan&quot;&gt;gochan&lt;/a&gt;）；&lt;/li&gt;
  &lt;li&gt;为方便分析各个组件的状态，统一打印日志，并把日志收集到 ELK 中进行分析（为此专门写了开源项目 &lt;a href=&quot;https://github.com/chalvern/sugar&quot;&gt;sugar&lt;/a&gt;）；&lt;/li&gt;
  &lt;li&gt;其他。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;汇闲麻将后端架构里的并发模型&quot;&gt;汇闲麻将后端架构里的并发模型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/huixian-mahjong-server-summary.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在架构设计初期，我曾经尝试通过 &lt;strong&gt;锁&lt;/strong&gt; 的方式维持玩家、桌子等的信息一致性，后来编写代码的时候发现逻辑非常的啰嗦，很多操作都需要考虑到加锁与解锁，当业务逻辑稍微变得复杂后难以维护，还很容易出现死锁的情况。那几天正好看到一位同事在玩《异星工厂》，受里面的传送带的启发，构思出了最初的“游戏后端线程架构图”原型，如上图所示。&lt;/p&gt;

&lt;p&gt;“不要通过共享内存来通信，要通过通信来共享内存”，这句话是 Go 社区中非常经典的一句话。上面的架构图的设计一脉相承了“通过通信维护对象状态”的思路。每个协程（goroutine）搭配一个传送带（buffer-channel），此协程只处理自己传送带上的逻辑（闭包）。&lt;strong&gt;上图中每个圆圈都是一个协程，圆圈的周围则是配套的传送带，外界（其他协程）可以把逻辑封装放置在传送带上，然后被当前协程顺序进行处理。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;具体的：① 每个用户与游戏服的长连接上面挂两个协程（goroutine），其中读协程（read）负责读取客户端传送过来的数据，写协程（write）负责写服务端返回的数据给客户端。② 读协程对用户数据进行拆包后，把请求打包成为任务放置到主协程（main）的传送带上（信道），主协程依次处理自己传送带上的任务，进行简单的逻辑处理后分发给相应的牌桌（table）（把逻辑打包成为任务放置到牌桌的传送带）；③ 各个牌桌的协程依次处理自己传送带上的任务，并把响应的发送任务给写协程（write）；④ 写协程负责统一把数据返回给用户；⑤ 对于不同房间（room）中桌子的分配、借还等，由一个总的房间协程统筹进行管理。&lt;/p&gt;

&lt;p&gt;有了上面的并发模型图，模块的划分就变得有依据也更合理，差不多花了两个月的时间，汇闲麻将就部署到预发布环境进行测试了。最后因为政策限制没有能正式发布，还是非常可惜的。。。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;“不要通过共享内存来通信，要通过通信来共享内存”；在设计并开发完汇闲麻将的后端业务逻辑后，感觉对这句话的理解更透彻了。当然，这里并不是强调锁没有使用价值，其实在一些场合下使用锁会更合理，就像《&lt;a href=&quot;/2019/05/12/golang-concurrency-03-map.html&quot;&gt;浅谈 Golang 中数据的并发同步问题（三）&lt;/a&gt;》中所描述的那样。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/12/31/thinking-of-architecture.html&quot;&gt;从 Clean-Architecture 谈架构原理及其应用 - 敬维&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chalvern/gochan&quot;&gt;GitHub - chalvern/gochan&lt;/a&gt; 提供&lt;strong&gt;局部保序&lt;/strong&gt;的多并发消息队列，简单讲就是把同一个 UUID 的事件放到同一个消息队列中等待执行，从而保证同一个 UUID 事件的保序。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2019/02/13/linux-process-thread-schedule-2.html&quot;&gt;Linux系统调度原理浅析（二） - 敬维&lt;/a&gt; 介绍了对进程、线程的认识&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chalvern/sugar&quot;&gt;GitHub - chalvern/sugar: simpler golang logger which package sugared zap&lt;/a&gt; Golang项目中更好用的日志打印小工具&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chalvern/gochan&quot;&gt;GitHub - chalvern/gochan: pool of goroutine with buffer channel, for concurrent execution but events of individual object running sequentially&lt;/a&gt; 局部保序的轻量级 Golang 消息队列小工具&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lonng/nano&quot;&gt;GitHub - lonng/nano: Lightweight, facility, high performance golang based game server framework&lt;/a&gt; 汇闲麻将的后端服务基于 nano 框架进行了开发&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 30 Jul 2019 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2019/07/30/huixian-mahjong-server-summary.html</link>
        <guid isPermaLink="true">https://jingwei.link/2019/07/30/huixian-mahjong-server-summary.html</guid>
        
        <category>基础</category>
        
        <category>实用</category>
        
        <category>golang</category>
        
        
        <category>基础</category>
        
      </item>
    
      <item>
        <title>给 Golang 日志打印加点糖——sugar</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#日志打印中间件-sugar-简介&quot; id=&quot;markdown-toc-日志打印中间件-sugar-简介&quot;&gt;日志打印中间件 sugar 简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#一些注意点&quot; id=&quot;markdown-toc-一些注意点&quot;&gt;一些注意点&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#方法&quot; id=&quot;markdown-toc-方法&quot;&gt;方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#logs-格式预先看&quot; id=&quot;markdown-toc-logs-格式预先看&quot;&gt;logs 格式预先看&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#默认的开发模式&quot; id=&quot;markdown-toc-默认的开发模式&quot;&gt;默认的开发模式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#生产模式下的-json-格式输出&quot; id=&quot;markdown-toc-生产模式下的-json-格式输出&quot;&gt;生产模式下的 json 格式输出&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#例子&quot; id=&quot;markdown-toc-例子&quot;&gt;例子&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#默认配置&quot; id=&quot;markdown-toc-默认配置&quot;&gt;默认配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#定制化配置&quot; id=&quot;markdown-toc-定制化配置&quot;&gt;定制化配置&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;日志打印中间件-sugar-简介&quot;&gt;日志打印中间件 sugar 简介&lt;/h2&gt;

&lt;p&gt;项目地址见 &lt;a href=&quot;https://github.com/chalvern/sugar&quot;&gt;这里&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;在 Golang 的日志库中，之前使用较多的是 &lt;a href=&quot;https://github.com/sirupsen/logrus&quot;&gt;logrus&lt;/a&gt;。后来了解到还有一个性能更佳的 &lt;a href=&quot;https://github.com/uber-go/zap&quot;&gt;zap&lt;/a&gt;，于是探究了一番，发现 zap 的使用比较啰嗦，应用示例也不是很简洁，于是封装 zap 成为 sugar 项目。 具体的使用示例大家可以参考 &lt;a href=&quot;./golang-logger-sugar.html#例子&quot;&gt;例子&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Sugar 封装了 zap 日志库，让开发者能够更方便、快捷地使用这个插件。
本库只是简单的封装，如果使用过程中遇到问题，推荐阅读 &lt;a href=&quot;https://github.com/uber-go/zap&quot;&gt;zap&lt;/a&gt; 的相关文档寻找答案。&lt;/p&gt;

&lt;p&gt;当然，欢迎大家提 issue 来一起完善这个仓库。&lt;/p&gt;

&lt;h2 id=&quot;一些注意点&quot;&gt;一些注意点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Sugar 使用 zap 仓库的 &lt;code class=&quot;highlighter-rouge&quot;&gt;zap.NewDevelopmentConfig()&lt;/code&gt; 方法返回的配置作为默认配置（开发环境），这个配置使用 console 类型的输出格式（平铺的那种，区别于 json 类型的日志）&lt;/li&gt;
  &lt;li&gt;我曾经的工作阅历，认为服务容器化会是未来的趋势，因此觉得开发环境也有必要配置 json 格式的输出，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;InitDevelopmentSugar()&lt;/code&gt; 可以达到目的。这样大家写容器化的服务时可以直接使用这个库而不需要定制日志路径。&lt;/li&gt;
  &lt;li&gt;生产环境默认就是 json 格式，主要是为了方便地把日志收集到 ELK 中去。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;方法&quot;&gt;方法&lt;/h2&gt;

&lt;p&gt;Sugar 封装了 sugared-zap 的所有方法，如下（如果有疏漏，可以提 issue 通知我）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Debug/Debugf&lt;/li&gt;
  &lt;li&gt;Info/Infof&lt;/li&gt;
  &lt;li&gt;Warn/Warnf&lt;/li&gt;
  &lt;li&gt;Error/Errorf&lt;/li&gt;
  &lt;li&gt;Fatal/Fatalf&lt;/li&gt;
  &lt;li&gt;Panic/Panicf&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;logs-格式预先看&quot;&gt;logs 格式预先看&lt;/h2&gt;

&lt;p&gt;我之所以喜欢使用 zap，主要因为它漂亮的输出格式（根据官方的描述，它的输出效率也很高，不过我还没有遇到这个瓶颈）&lt;/p&gt;

&lt;h3 id=&quot;默认的开发模式&quot;&gt;默认的开发模式&lt;/h3&gt;

&lt;p&gt;这种模式的输出是 console 样式，就是说日志平铺展示（开发模式也可以配置 json 格式的输出，见 &lt;a href=&quot;#一些注意点&quot;&gt;一些注意点&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2019-06-10T09:13:03.672+0800    DEBUG   default/main.go:7       default development sugar of chalvern   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unit&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
2019-06-10T09:13:03.672+0800    INFO    default/main.go:20      log of myCustomLogger info      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unit&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;my_custom_logger&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
2019-06-10T09:13:03.672+0800    WARN    default/main.go:21      log of myCustomLogger warn      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unit&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;my_custom_logger&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
github.com/chalvern/sugar.&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Logger&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Warn
        /Users/Chalvern/developer/golang/src/github.com/chalvern/sugar/logger.go:51
main.myCustomLogger
        /Users/Chalvern/developer/golang/src/github.com/chalvern/sugar/examples/default/main.go:21
main.main
        /Users/Chalvern/developer/golang/src/github.com/chalvern/sugar/examples/default/main.go:8
runtime.main
        /usr/local/go/src/runtime/proc.go:200
2019-06-10T09:13:03.672+0800    INFO    default/main.go:26      log of myCustomLogger2 info     &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unit&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;my_custom_logger_2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
2019-06-10T09:13:03.672+0800    WARN    default/main.go:27      log of myCustomLogger2 warn     &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unit&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;my_custom_logger_2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
github.com/chalvern/sugar.&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Logger&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Warn
        /Users/Chalvern/developer/golang/src/github.com/chalvern/sugar/logger.go:51
main.myCustomLogger2
        /Users/Chalvern/developer/golang/src/github.com/chalvern/sugar/examples/default/main.go:27
main.main
        /Users/Chalvern/developer/golang/src/github.com/chalvern/sugar/examples/default/main.go:9
runtime.main
        /usr/local/go/src/runtime/proc.go:200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;生产模式下的-json-格式输出&quot;&gt;生产模式下的 json 格式输出&lt;/h3&gt;

&lt;p&gt;生产模式默认是 json 格式的输出，从而方便把日志收集起来集中处理。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1560129183.672966&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;caller&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default/main.go:13&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default production sugar of chalvern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1560129183.673015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;caller&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default/main.go:20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log of myCustomLogger info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_custom_logger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;warn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1560129183.6730392&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;caller&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default/main.go:21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log of myCustomLogger warn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_custom_logger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1560129183.673059&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;caller&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default/main.go:26&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log of myCustomLogger2 info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_custom_logger_2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;warn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1560129183.673182&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;caller&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default/main.go:27&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log of myCustomLogger2 warn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_custom_logger_2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;例子&quot;&gt;例子&lt;/h2&gt;

&lt;p&gt;下面的例子也可以在 &lt;a href=&quot;./examples&quot;&gt;examples&lt;/a&gt; 目录找到。&lt;/p&gt;

&lt;h3 id=&quot;默认配置&quot;&gt;默认配置&lt;/h3&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// cat ./examples/default/main.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;github.com/chalvern/sugar&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default development sugar of chalvern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myCustomLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myCustomLogger2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InitProductionSugar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;should not be printed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default production sugar of chalvern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myCustomLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myCustomLogger2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myCustomLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewLoggerOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my_custom_logger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log of myCustomLogger info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log of myCustomLogger warn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myCustomLogger2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewLoggerOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my_custom_logger_2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log of myCustomLogger2 info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log of myCustomLogger2 warn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;定制化配置&quot;&gt;定制化配置&lt;/h3&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;github.com/chalvern/sugar&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;go.uber.org/zap&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewProductionConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputPaths&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./production.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorOutputPaths&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./production_err.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetSugar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myCustomLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myCustomLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewLoggerOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my_custom_logger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log of myCustomLogger info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log of myCustomLogger warn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 10 Jun 2019 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2019/06/10/golang-logger-sugar.html</link>
        <guid isPermaLink="true">https://jingwei.link/2019/06/10/golang-logger-sugar.html</guid>
        
        <category>golang</category>
        
        <category>实用</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>Golang 异步任务执行器——Gochan</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#项目背景&quot; id=&quot;markdown-toc-项目背景&quot;&gt;项目背景&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#设计的思路&quot; id=&quot;markdown-toc-设计的思路&quot;&gt;设计的思路&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#平常的设计&quot; id=&quot;markdown-toc-平常的设计&quot;&gt;平常的设计&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#状态无依赖的并发设计&quot; id=&quot;markdown-toc-状态无依赖的并发设计&quot;&gt;状态无依赖的并发设计&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#状态存在依赖的并发设计-gochan&quot; id=&quot;markdown-toc-状态存在依赖的并发设计-gochan&quot;&gt;状态存在依赖的并发设计 (gochan)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#使用示例&quot; id=&quot;markdown-toc-使用示例&quot;&gt;使用示例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;在最近编码过程中，大量使用了异步任务。在自己需求的基础上抽象出一个异步任务执行器，应该有挺多类似的需求，于是开源出来。项目地址为《&lt;a href=&quot;https://github.com/chalvern/gochan&quot;&gt;GitHub - chalvern/gochan&lt;/a&gt;》，还希望大家能够不吝 &lt;code class=&quot;highlighter-rouge&quot;&gt;star&lt;/code&gt; ✨。&lt;/p&gt;

&lt;h2 id=&quot;项目背景&quot;&gt;项目背景&lt;/h2&gt;
&lt;p&gt;一般情况下，我们可以通过定义一个带缓冲的 channel 变量接收某种事件，然后通过一个专用的 goroutine 消费执行这个 channel 中的事件。&lt;/p&gt;

&lt;p&gt;但是如果相关事件很多的时候，一个 goroutine 不够用了怎么办呢？或许我们会想到多创建几个专用的 goroutine 来并发地消费执行这个 channel 中的事件；如果 channel 中各个事件之间是独立的，是可行的，但是如果某些事件之间具有某种顺序上的约束，那么就需要对事件进行特定的分类。&lt;/p&gt;

&lt;p&gt;比如，一个订单的支付与货物发货，两个事件是需要保序的；但是不同的订单之间又是可以并发执行；其实就是实现一个微型的按特定主题分类的 pub-sub（发布-订阅）系统。以订单为例，可以根据订单单号，把相同单号的事件推送到同一个队列（channel），一个特定的执行器（goroutine）来消费执行这个队列中的事件，如此平行扩展多个类似的组合，实现并发。&lt;/p&gt;

&lt;h2 id=&quot;设计的思路&quot;&gt;设计的思路&lt;/h2&gt;
&lt;h3 id=&quot;平常的设计&quot;&gt;平常的设计&lt;/h3&gt;

&lt;p&gt;通过定义一个带缓冲的 channel 变量接收某种事件，然后通过一个专用的 goroutine 消费执行这个 channel 中的事件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
event -&amp;gt;
        |
event -&amp;gt; buffer-channel -&amp;gt; goroutine
        |
event -&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;状态无依赖的并发设计&quot;&gt;状态无依赖的并发设计&lt;/h3&gt;

&lt;p&gt;事件之间完全没有状态依赖，因此可以简单扩展 goroutine 进行加快事件执行速度。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
event -&amp;gt;                 -&amp;gt;goroutine
        |               |
event -&amp;gt; buffer-channel -&amp;gt; goroutine
        |               |
event -&amp;gt;                 -&amp;gt;goroutine

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;状态存在依赖的并发设计-gochan&quot;&gt;状态存在依赖的并发设计 (gochan)&lt;/h3&gt;

&lt;p&gt;引入一层分发器（dispatcher），根据某个特性（比如 uuid）把事件分发到相应的队列（buffer-channel）中。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
event -&amp;gt;              -&amp;gt; buffer-channel -&amp;gt; goroutine
        |            |
event &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; dispatcher -&amp;gt; buffer-channel -&amp;gt; goroutine
        |            |
event -&amp;gt;              -&amp;gt; buffer-channel -&amp;gt; goroutine

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用示例&quot;&gt;使用示例&lt;/h2&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;github.com/chalvern/gochan&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gochanNum&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferNum&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gochan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dispatcher&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gochan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gochanNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gochanNum&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferNum&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gochanNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gochanNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gochan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewDispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gochanNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chalvern/gochan&quot;&gt;GitHub - chalvern/gochan: pool of goroutine with buffer channel, for concurrent execution but events of individual object running sequentially&lt;/a&gt; gochan 代码库&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 02 Jun 2019 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2019/06/02/gochan-of-chalvern.html</link>
        <guid isPermaLink="true">https://jingwei.link/2019/06/02/gochan-of-chalvern.html</guid>
        
        <category>golang</category>
        
        <category>实用</category>
        
        <category>基础</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>Golang 闭包内的外部变量</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#golang-闭包内的外部变量&quot; id=&quot;markdown-toc-golang-闭包内的外部变量&quot;&gt;Golang 闭包内的外部变量&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#闭包匿名函数&quot; id=&quot;markdown-toc-闭包匿名函数&quot;&gt;闭包（匿名函数）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#先看一段代码&quot; id=&quot;markdown-toc-先看一段代码&quot;&gt;先看一段代码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#golang-闭包内的外部变量-1&quot; id=&quot;markdown-toc-golang-闭包内的外部变量-1&quot;&gt;Golang 闭包内的外部变量&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#汇编代码的分析&quot; id=&quot;markdown-toc-汇编代码的分析&quot;&gt;汇编代码的分析&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#汇编代码的生成&quot; id=&quot;markdown-toc-汇编代码的生成&quot;&gt;汇编代码的生成&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mainmain-函数的汇编代码&quot; id=&quot;markdown-toc-mainmain-函数的汇编代码&quot;&gt;main.main 函数的汇编代码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#myfunc-匿名函数的汇编代码&quot; id=&quot;markdown-toc-myfunc-匿名函数的汇编代码&quot;&gt;myfunc （匿名函数）的汇编代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;为了在不同的线程之间转移任务，最近项目代码中大量地使用了闭包：在一个 goroutine（协程）中把一段逻辑封装成为匿名函数，然后传入到另一个线程的 channel（通道）变量去排队运行。&lt;/p&gt;

&lt;p&gt;在业务逻辑的测试过程中发现了一个怪异的点，查证后发现原来是闭包的使用认知存在问题，这里作为一个知识点总结一下。&lt;/p&gt;

&lt;h2 id=&quot;golang-闭包内的外部变量&quot;&gt;Golang 闭包内的外部变量&lt;/h2&gt;
&lt;h3 id=&quot;闭包匿名函数&quot;&gt;闭包（匿名函数）&lt;/h3&gt;
&lt;p&gt;教科书式的定义可以这么理解闭包：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;闭包是可以包含自由（未绑定到特定对象）变量的代码块，这些变量不在这个代码块内或者任何全局上下文中定义，而是在定义代码块的环境中定义。要执行的代码块（由于自由变量包含在代码块中，所以这些自由变量以及它们引用的对象没有被释放）为自由变量提供绑定的计算环境（作用域）。（摘自《Go语言编程》）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果大家对闭包的细节感兴趣希望深入理解其设计，可以自行查阅资料；本文中提到的闭包可以简单地理解为“匿名函数”。&lt;/p&gt;

&lt;h3 id=&quot;先看一段代码&quot;&gt;先看一段代码&lt;/h3&gt;
&lt;p&gt;下面的代码中定义了一个匿名函数并赋值给 &lt;code class=&quot;highlighter-rouge&quot;&gt;myfunc&lt;/code&gt; 变量，同时在代码的后面连续调用了两次 &lt;code class=&quot;highlighter-rouge&quot;&gt;myfunc&lt;/code&gt; 函数。大家可以先考虑一下代码的输出是什么，然后再查看文章后面的内容。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// cat main.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a1: %d, a2:%d, sum: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行上面的代码，可以看到上面代码的输出为：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# go run main.go &lt;/span&gt;
a1: 1, a2:2, &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;: 3
a1: 11, a2:22, &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;: 33
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;golang-闭包内的外部变量-1&quot;&gt;Golang 闭包内的外部变量&lt;/h3&gt;
&lt;p&gt;在上面的代码中， myfunc 指向了一个匿名函数（闭包），在这个匿名函数中，&lt;code class=&quot;highlighter-rouge&quot;&gt;a1&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;a2&lt;/code&gt; 均是外部变量。&lt;/p&gt;

&lt;p&gt;从上面代码的运行输出可以知道，&lt;strong&gt;闭包内的外部变量并不是被“锁死”的，而是会随着外部变量的变化而变化&lt;/strong&gt;。这个特性应该与函数参数的传值特性进行区分：① Golang 中函数的参数以及返回都是数值的传递，而非引用的传递；也就是说，即使入参是一个指针，在函数运行的时候起作用的也是一个被拷贝出来的指针。② 闭包内的外部变量会跟随外部变量的变化，就&lt;strong&gt;好像&lt;/strong&gt;在闭包内引用的永远是变量的指针（哪怕变量是一个普普通通的数值）；比如上面代码中 &lt;code class=&quot;highlighter-rouge&quot;&gt;a1&lt;/code&gt; 和  &lt;code class=&quot;highlighter-rouge&quot;&gt;a2&lt;/code&gt; 均是 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; 类型的值，但在闭包内的使用就好像是指针。&lt;/p&gt;

&lt;h2 id=&quot;汇编代码的分析&quot;&gt;汇编代码的分析&lt;/h2&gt;
&lt;p&gt;如果想要进一步分析闭包内外部变量的作用方式，可以在汇编层面进行进一步的探究，研究其本质。&lt;/p&gt;
&lt;h3 id=&quot;汇编代码的生成&quot;&gt;汇编代码的生成&lt;/h3&gt;
&lt;p&gt;把上面的代码保存到某个目录中，运行下面的指令可以得到相应的汇编文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下面的指令标明把 main.go 生成 linux 下的 amd64 二进制文件&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 其中 -N 指定编译器不要进行优化，-l 指定编译器不要对函数进行内联处理&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 其中 -o testl 指定输出二进制文件到 testl 中&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -gcflags 的参数可以通过 go tool compile --help 获取&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CGO_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;GOOS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux &lt;span class=&quot;nv&quot;&gt;GOARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;amd64 go build &lt;span class=&quot;nt&quot;&gt;--gcflags&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-N -l&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; testl main.go

&lt;span class=&quot;c&quot;&gt;# 可以通过 go tool objdump --help 来查看 objdump 的 -s 用法&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 比如 go tool objdump -s &quot;^main.main$&quot; testl 只返回 main.main 函数的汇编代码&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 下面的指令标明把 上一步生成的 testl 提取汇编代码到 ojbl.S 文件中&lt;/span&gt;
go tool objdump &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; testl &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; objl.S
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mainmain-函数的汇编代码&quot;&gt;main.main 函数的汇编代码&lt;/h3&gt;
&lt;p&gt;函数体对应的汇编语言如下，大家可以看里面的注释进行理解。&lt;strong&gt;需要重点关注的点&lt;/strong&gt;是：在 myfunc 函数定义的地方， &lt;code class=&quot;highlighter-rouge&quot;&gt;a1&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;a2&lt;/code&gt; 都是地址传递（地址传递）而非数值传递。&lt;/p&gt;

&lt;p&gt;从下面的汇编代码还可以看出第二次调用 myfunc 函数与第一次调用的方式不一样，主要考虑是 &lt;code class=&quot;highlighter-rouge&quot;&gt;DX&lt;/code&gt; 寄存器的纯粹性，第一次调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;myfunc&lt;/code&gt; 时 &lt;code class=&quot;highlighter-rouge&quot;&gt;DX&lt;/code&gt; 是满足需求的，第二次就需要专门置位了。&lt;/p&gt;

&lt;div class=&quot;language-as highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;golang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jingwei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;go&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488300&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;64488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b0c25f8ffffff&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xfffffff8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CX&lt;/span&gt;	
  &lt;span class=&quot;mh&quot;&gt;0x488309&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;483&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b6110&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;CMPQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;	
  &lt;span class=&quot;mh&quot;&gt;0x48830d&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f8690000000&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;JBE&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4883a3&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;上面三是对栈进行扩容判定，如果栈不够用了，会进行扩容&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488313&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4883&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ec40&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;SUBQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;预留出&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的栈空间供&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;函数使用&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488317&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;48896&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c2438&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	
  &lt;span class=&quot;mh&quot;&gt;0x48831c&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d6c2438&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;LEAQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BP&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;上面两句待探究，应该是为了保存某个场景为未来恢复某个状态做准备&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488321&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c744240801000000&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;赋值到&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址，即&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48832a&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c7042402000000&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$0x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;赋值到&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址，即&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;myfunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488332&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c744242000000000&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		
  &lt;span class=&quot;mh&quot;&gt;0x48833b&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f57c0&lt;/span&gt;			&lt;span class=&quot;nx&quot;&gt;XORPS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X0&lt;/span&gt;			
  &lt;span class=&quot;mh&quot;&gt;0x48833e&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f11442428&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVUPS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		
  &lt;span class=&quot;mh&quot;&gt;0x488343&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d542420&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;LEAQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址加载到&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488348&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4889542418&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的值，即&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的值，赋值到&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中保存的是&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48834d&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;8402&lt;/span&gt;			&lt;span class=&quot;nx&quot;&gt;TESTB&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;			
  &lt;span class=&quot;mh&quot;&gt;0x48834f&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d05ca000000&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;LEAQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（我们定义的闭包函数体）&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址赋值到&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488356&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4889442420&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的值，即&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址，赋值到&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中；&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中保存的是&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的调用地址&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48835b&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;8402&lt;/span&gt;			&lt;span class=&quot;nx&quot;&gt;TESTB&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;			
  &lt;span class=&quot;mh&quot;&gt;0x48835d&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d442408&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;LEAQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址，即&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址（指针）赋值到&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488362&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4889442428&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;赋值到&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中；&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中保存的是&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488367&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;8402&lt;/span&gt;			&lt;span class=&quot;nx&quot;&gt;TESTB&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;			
  &lt;span class=&quot;mh&quot;&gt;0x488369&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d0424&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;LEAQ&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址，即&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址（指针）赋值到&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48836d&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4889442430&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;赋值到&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中；&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中保存的是&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488372&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4889542410&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的值，即&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址，赋值到&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中；&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中保存的是&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488377&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b442420&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;中的内容，即&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址加载到&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;寄存器&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48837c&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ffd0&lt;/span&gt;			&lt;span class=&quot;nx&quot;&gt;CALL&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;调用&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;函数&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48837e&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c74424080b000000&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$0xb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;赋值到&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址，即更新&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488387&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c7042416000000&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$0x16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;赋值到&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址，即更新&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48838f&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b542410&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这里把&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中的值，即&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址加载到&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;寄存器&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488394&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b02&lt;/span&gt;			&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中的值，即&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址加载到&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;寄存器&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488397&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ffd0&lt;/span&gt;			&lt;span class=&quot;nx&quot;&gt;CALL&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;调用&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;函数。&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488399&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b6c2438&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BP&lt;/span&gt;	
  &lt;span class=&quot;mh&quot;&gt;0x48839e&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4883&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c440&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ADDQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;		
  &lt;span class=&quot;mh&quot;&gt;0x4883a2&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;c3&lt;/span&gt;			&lt;span class=&quot;nx&quot;&gt;RET&lt;/span&gt;			
&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x4883a3&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;e83869fcff&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;CALL&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;morestack_noctxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;申请更多的栈空间的地方，也是&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;goroutine&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;抢占的检查点&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x4883a8&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;e953ffffff&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;JMP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;			
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;myfunc-匿名函数的汇编代码&quot;&gt;myfunc （匿名函数）的汇编代码&lt;/h3&gt;

&lt;p&gt;从下面的汇编代码可以看到，匿名函数在每次调用时，都会 ① 首先根据闭包内的外部变量的地址（&lt;code class=&quot;highlighter-rouge&quot;&gt;a1&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;a2&lt;/code&gt; 的地址）获取得到外部变量的值，然后才 ② 利用获取得到的值进行闭包内逻辑的运算。&lt;/p&gt;

&lt;div class=&quot;language-as highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;golang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jingwei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;go&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;myfunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488420&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;64488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b0c25f8ffffff&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xfffffff8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CX&lt;/span&gt;	
  &lt;span class=&quot;mh&quot;&gt;0x488429&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d4424a8&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;LEAQ&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-0&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;	
  &lt;span class=&quot;mh&quot;&gt;0x48842e&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;483&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b4110&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;CMPQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;	
  &lt;span class=&quot;mh&quot;&gt;0x488432&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f86ab010000&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;JBE&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4885e3&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;上面三是对栈进行扩容判定，如果栈不够用了，会进行扩容&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488438&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4881&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ecd8000000&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;SUBQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$0xd8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;预留出&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd8&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的栈空间供&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;函数使用&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48843f&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4889&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ac24d0000000&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	
  &lt;span class=&quot;mh&quot;&gt;0x488447&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dac24d0000000&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;LEAQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BP&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;上面两句待探究，应该是为了保存某个场景为恢复某个状态做准备&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;下面重点关注&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的值，是&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mian&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址（区别于本函数的&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;地址，本函数的&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;地址已经由&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SUBQ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;改变过了）&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48844f&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b4208&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，其实就是&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中的&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，即&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址，把这个地址里的值赋值到&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488453&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4889842480000000&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的值赋值到&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48845b&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b4210&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，其实就是&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中的&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，即&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的地址，把这个地址里的值赋值到&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48845f&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;4889442478&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的值赋值到&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x488464&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b8c2480000000&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CX&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;接下来就是很容易理解的加法运算了&lt;/span&gt;
  &lt;span class=&quot;mh&quot;&gt;0x48846c&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b09&lt;/span&gt;			&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CX&lt;/span&gt;		
  &lt;span class=&quot;mh&quot;&gt;0x48846f&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;480308&lt;/span&gt;			&lt;span class=&quot;nx&quot;&gt;ADDQ&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CX&lt;/span&gt;		
  &lt;span class=&quot;mh&quot;&gt;0x488472&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;48894&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c2440&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;MOVQ&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	
	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1: %d, a2:%d, sum: %d\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;再往下就是复杂的&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;函数了，代码很长很臭，就不贴了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文就闭包中外部变量的使用进行展开，首先 ① 介绍了闭包内的外部变量会随着外部变量的变化而变化（类比于指针的使用），然后 ② 在汇编语句层面进行了进一步的分析，道明了闭包中外部变量使用的本质。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/hzhuxin/p/9199332.html&quot;&gt;Go语言中的闭包&lt;/a&gt; 介绍了 Golang 中的闭包&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://9p.io/sys/doc/asm.html&quot;&gt;A Manual for the Plan 9 assembler&lt;/a&gt;  神奇的汇编器，还没来得及研究，放这里作为后面的参考&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://9p.io/sys/doc/asm.pdf&quot;&gt;Plan9 的 asm.PDF&lt;/a&gt;  PDF 文档，可以作为理解 Golang 汇编语句的参考&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lrita.github.io/2017/12/12/golang-asm/&quot;&gt;golang 汇编 — 源代码&lt;/a&gt; 很不错的讲汇编的内容&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 01 Jun 2019 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2019/06/01/golang-outer-variable-in-clousure.html</link>
        <guid isPermaLink="true">https://jingwei.link/2019/06/01/golang-outer-variable-in-clousure.html</guid>
        
        <category>golang</category>
        
        <category>实用</category>
        
        <category>基础</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>Golang 并发问题（五）goroutine 的调度及抢占</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#先看两段代码&quot; id=&quot;markdown-toc-先看两段代码&quot;&gt;先看两段代码&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#第一段代码&quot; id=&quot;markdown-toc-第一段代码&quot;&gt;第一段代码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第二段代码&quot; id=&quot;markdown-toc-第二段代码&quot;&gt;第二段代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#协程-goroutine-的抢占&quot; id=&quot;markdown-toc-协程-goroutine-的抢占&quot;&gt;协程 goroutine 的抢占&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#gpm-模型&quot; id=&quot;markdown-toc-gpm-模型&quot;&gt;G/P/M 模型&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#goroutine-发生调度的时机&quot; id=&quot;markdown-toc-goroutine-发生调度的时机&quot;&gt;goroutine 发生调度的时机&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#goroutine-的抢占&quot; id=&quot;markdown-toc-goroutine-的抢占&quot;&gt;goroutine 的抢占&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;过去 Web 开发的工作比较少涉及到并发的问题，每个用户请求在独立的线程里面进行，偶尔涉及到异步任务但是线程间数据同步模型非常简单，因此并未深入探究过并发这一块。最近在写游戏相关的服务端代码时发现数据的并发同步场景非常多，因此花了一点时间来探索和总结。这是一个系列文章，本文为第五篇。&lt;/p&gt;

&lt;p&gt;就像前面几篇文章所描述的，开发者在日常开发中对并发的关注点主要是锁、管道（channel），比较少涉及到协程（goroutine） 的调度。不过了解协程的调度机制能够让开发者更好地认识并发的本质，从而在日常编码过程中做出更好的并发保证措施。本文简单介绍 Golang 中协程（goroutine）的调度及其抢占。&lt;/p&gt;

&lt;h2 id=&quot;先看两段代码&quot;&gt;先看两段代码&lt;/h2&gt;
&lt;h3 id=&quot;第一段代码&quot;&gt;第一段代码&lt;/h3&gt;
&lt;p&gt;下面的代码是《&lt;a href=&quot;/2019/05/11/golang-concurrency-02.html&quot;&gt;浅谈 Golang 中数据的并发同步问题（二）&lt;/a&gt;》中的一个示例 demo，为了说明问题增加了对单核的限制。运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;go run -race main.go&lt;/code&gt; 可以看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Money: 1100&lt;/code&gt; 的输出。&lt;/p&gt;

&lt;p&gt;下面的代码中包含两条 &lt;code class=&quot;highlighter-rouge&quot;&gt;atomic.AddInt64&lt;/code&gt; 语句，分别在两个协程中运行。如果在 &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Printf&lt;/code&gt; 语句执行时子协程已经执行，输出结果是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Money: 2100&lt;/code&gt;；当然，上面的代码极大概率会输出 &lt;code class=&quot;highlighter-rouge&quot;&gt;Money: 1100&lt;/code&gt; ，即在 &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Printf&lt;/code&gt; 语句执行时子协程尚未执行。&lt;strong&gt;那么， Golang 调度器何时才会调度并运行子协程呢？&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// cat main.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sync/atomic&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GOMAXPROCS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddInt64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddInt64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Money: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadInt64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;第二段代码&quot;&gt;第二段代码&lt;/h3&gt;
&lt;p&gt;我们可以构造一段与上一小节结构类似的代码，如下面的代码所示。通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;go run main.go&lt;/code&gt; 运行下面的代码可以看到输出结果中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;panic: hello goroutine&lt;/code&gt; ，却找不到&lt;code class=&quot;highlighter-rouge&quot;&gt;sum: xxxxxx&lt;/code&gt;（如果看到的结果不一致，可以考虑增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环的终止判定条件）。&lt;strong&gt;也就是说，下面的代码的子协程在代码退出前被成功调度。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// cat main.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Index: %d, Second: %d, NanoSecond: %d &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nanosecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GOMAXPROCS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello goroutine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;666666666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sum: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;协程-goroutine-的抢占&quot;&gt;协程 goroutine 的抢占&lt;/h2&gt;
&lt;p&gt;在 Golang 中可以非常方便地创建协程（goroutine），在可用核心一定的条件下，协程该如何有效地利用 CPU 资源呢？在《&lt;a href=&quot;/2019/02/13/linux-process-thread-schedule-2.html&quot;&gt;Linux系统调度原理浅析（二）&lt;/a&gt;》中简单描述过 Linux 内核的调度机制以及 goroutine 的调度机制：其中 Linux 内核通过时间片的方式给不同的系统线程分配 CPU 资源，Golang 则引入了 G/P/M 模型来实现调度，那么 Golang 的运行时（runtime）如何实现对 goroutine 的调度从而合理分配 CPU 资源呢？&lt;/p&gt;

&lt;h3 id=&quot;gpm-模型&quot;&gt;G/P/M 模型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/golang-routine-scheduler.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（图片摘自《&lt;a href=&quot;https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/&quot;&gt;也谈goroutine调度器 - Tony Bai&lt;/a&gt;》）&lt;/p&gt;

&lt;p&gt;P 是一个“逻辑 Proccessor”，每个 G 要想真正运行起来，首先需要被分配一个 P（进入到 P 的 local runq 中，这里暂忽略 global runq 那个环节）。对于 G 来说，P 就是运行它的 “CPU”，可以说：G 的眼里只有 P。但从 Go scheduler 视角来看，真正的 “CPU” 是 M，只有将 P 和 M 绑定才能让 P 的 runq 中 G 得以真实运行起来。这样的 P 与 M 的关系，就好比 Linux 操作系统调度层面用户线程 (user thread) 与核心线程 (kernel thread) 的对应关系那样，都是 （n × m） 模型。具体地：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;G: 表示 goroutine，存储了 goroutine 的执行 stack 信息、goroutine 状态以及 goroutine 的任务函数等；另外 G 对象是可以重用的。&lt;/li&gt;
  &lt;li&gt;P: 表示逻辑 processor，P的数量决定了系统内最大可并行的 G 的数量（前提是系统的物理 CPU 核数&amp;gt;=P 的数量，可以 &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.GOMAXPROCS(20)&lt;/code&gt;增加 P 数量大于 CPU 核数）；P 的最大作用还是其拥有的各种 G 对象队列、链表、一些 cache 和状态。&lt;/li&gt;
  &lt;li&gt;M: M代表着真正的执行计算资源。在绑定有效的 P 后，进入 schedule 循环；而 schedule 循环的机制大致是从各种队列、P 的本地队列中获取 G，切换到 G 的执行栈上并执行G的函数，调用 goexit 做清理工作并回到 M，如此反复。M并不保留 G 状态，这是 G 可以跨 M 调度的基础。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;goroutine-发生调度的时机&quot;&gt;goroutine 发生调度的时机&lt;/h3&gt;
&lt;p&gt;假如忽略（G、P、M）模型的复杂性，可以想象一个 goroutine 获得计算资源（CPU）后一般不能一直运行到完毕，它们往往可能要&lt;strong&gt;等待&lt;/strong&gt;其他资源才能执行完成，比如读取磁盘文件内容、通过 RPC 调用远程服务等，在&lt;strong&gt;等待&lt;/strong&gt;的过程中 goroutine 是不需要消耗计算资源的，因此调度器可以把计算资源给其他的 goroutine 使用。&lt;/p&gt;

&lt;p&gt;参考《&lt;a href=&quot;https://www.jianshu.com/p/fc35e081d900&quot;&gt;Golang goroutine&lt;/a&gt;》可以知道，goroutine 遇到下面的情况下可能会产生重新调度（大家判断哪些代码属于下面这些情况）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;阻塞 I/O&lt;/li&gt;
  &lt;li&gt;select操作&lt;/li&gt;
  &lt;li&gt;阻塞在channel&lt;/li&gt;
  &lt;li&gt;等待锁&lt;/li&gt;
  &lt;li&gt;主动调用 runtime.Gosched()&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;goroutine-的抢占&quot;&gt;goroutine 的抢占&lt;/h3&gt;
&lt;p&gt;如果一个 goroutine 不包含上面提到的几种情况，那么其他的 goroutine 就无法被调度到相应的 CPU 上面运行，这是不应该发生的。这时候就需要抢占机制来打断长时间占用 CPU 资源的 goroutine ，发起重新调度。&lt;/p&gt;

&lt;p&gt;Golang 运行时（runtime）中的系统监控线程 &lt;code class=&quot;highlighter-rouge&quot;&gt;sysmon&lt;/code&gt; 可以找出“长时间占用”的 goroutine，从而“提醒”相应的 goroutine 该中断了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;特别说明-1&lt;/strong&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;sysmon&lt;/code&gt;在独立的 M（线程）中运行，且不需要绑定 P。这意味着，&lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.GOMAXPROCS(1)&lt;/code&gt;限制 P 的数量为 1 的情况下，即使一个 goroutine 一直占用这个 P 进行密集型计算（意味着 goroutine 一直占有唯一的 P），依然不影响 &lt;code class=&quot;highlighter-rouge&quot;&gt;sysmon&lt;/code&gt; 的正常运行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;特别说明-2&lt;/strong&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;sysmon&lt;/code&gt; 可以找到“长时间占用 P”的 goroutine，但也只是标记 goroutine 应该被抢占了，并无法强制进行 goroutine 的切换。因此本文的 “第二段代码” 在进行 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环时并不会被抢占，而是在 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环结束后执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Printf(&quot;sum: %d\n&quot;, sum)&lt;/code&gt; 的时候才被抢占（因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环里没有被插入抢占检查点，也就是说抢占检查点是编译器预先插入的，在非内联的函数的前面，具体可以查看最后几篇参考文章）。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文从两段代码切入，探究了 goroutine 的调度以及抢占。对于本文的第一段代码，主协程的代码并不需要消耗 &lt;code class=&quot;highlighter-rouge&quot;&gt;forcePreemptNS&lt;/code&gt;（默认为 10 ms）时长的资源，而主线程也没有主动把资源让出来，因此子协程没有运行。对于本文的第二段代码，由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环消耗了大量的计算资源，满足了 &lt;code class=&quot;highlighter-rouge&quot;&gt;forcePreemptNS&lt;/code&gt; 时间阈值，调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Printf&lt;/code&gt; 时触发了抢占，因此子协程得以运行。&lt;/p&gt;

&lt;p&gt;本文的编写历时好几天，期间查阅了大量的资料，修修改改好几次，导致本文的架构比较松散；如果大家对本文有什么疑问，可以直接邮件我进行交流 🤝。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://skoo.me/go/2013/11/29/golang-schedule&quot;&gt;skoo  goroutine与调度器&lt;/a&gt; 比较经典的比喻，描述了调度的机制&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/fc35e081d900&quot;&gt;Golang goroutine - 简书&lt;/a&gt; 介绍了抢占式调度的机制&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/&quot;&gt;也谈goroutine调度器 - Tony Bai&lt;/a&gt; 比较系统地介绍了 goroutine 的调度&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jingwei.link/2019/02/13/linux-process-thread-schedule-2.html&quot;&gt;Linux系统调度原理浅析（二） - 敬维&lt;/a&gt; 简单介绍了 linux 系统调度&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.12/src/runtime/proc.go#L4378&quot;&gt;go/proc.go at release-branch.go1.12 · golang/go · GitHub&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;forcePreemptNS&lt;/code&gt; 强制协程调度的变量，默认为 &lt;code class=&quot;highlighter-rouge&quot;&gt;10 ms&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.12/src/runtime/proc.go#L4378&quot;&gt;go/proc.go at release-branch.go1.12 · golang/go · GitHub&lt;/a&gt; 如果一个 goroutine 长时间占用计算资源，&lt;code class=&quot;highlighter-rouge&quot;&gt;sysmon&lt;/code&gt;可以触发抢占；&lt;code class=&quot;highlighter-rouge&quot;&gt;sysmon&lt;/code&gt;在独立的 M（线程）中运行，且不需要绑定 P。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/golang/go/blob/dev.boringcrypto.go1.12/src/runtime/stack.go#L911&quot;&gt;go/stack.go at release-branch.go1.12 · golang/go · GitHub&lt;/a&gt; Golang 编译器会在每个非内联函数前面运行栈溢出检查，如果栈溢出则扩展栈，从而执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;newstack()&lt;/code&gt;函数，继而触发抢占机制&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/blogs/2014/05/10/debugging-performance-issues-in-go-programs&quot;&gt;Debugging performance issues in Go programs - Intel® Software&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/golang/go/issues/10958&quot;&gt;runtime: tight loops should be preemptible · Issue #10958 · golang/go · GitHub&lt;/a&gt; 介绍了空 for 的不可中断&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html&quot;&gt;Scheduling In Go : Part II - Go Scheduler&lt;/a&gt; if you run any tight loops that are not making function calls, you will cause latencies within the scheduler and garbage collection&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12413510/why-is-this-go-code-blocking&quot;&gt;goroutine - Why is this Go code blocking? - Stack Overflow&lt;/a&gt; 介绍了为什么 for{} 无限&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 26 May 2019 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2019/05/26/golang-routine-scheduler.html</link>
        <guid isPermaLink="true">https://jingwei.link/2019/05/26/golang-routine-scheduler.html</guid>
        
        <category>golang</category>
        
        <category>实用</category>
        
        <category>基础</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>Golang 并发问题（四）之单核上的并发问题</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#golang-在单核上的并发问题&quot; id=&quot;markdown-toc-golang-在单核上的并发问题&quot;&gt;Golang 在单核上的“并发”问题&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#gotour上的乌龙案例&quot; id=&quot;markdown-toc-gotour上的乌龙案例&quot;&gt;gotour上的乌龙案例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#单个物理核心上的并发&quot; id=&quot;markdown-toc-单个物理核心上的并发&quot;&gt;单个物理核心上的“并发”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#runtimegomaxprocs1-方法&quot; id=&quot;markdown-toc-runtimegomaxprocs1-方法&quot;&gt;runtime.GOMAXPROCS(1) 方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;过去 Web 开发的工作比较少涉及到并发的问题，每个用户请求在独立的线程里面进行，偶尔涉及到异步任务但是线程间数据同步模型非常简单，因此并未深入探究过并发这一块。最近在写游戏相关的服务端代码时发现数据的并发同步场景非常多，因此花了一点时间来探索和总结。这是一个系列文章，本文为第四篇。&lt;/p&gt;

&lt;p&gt;本文简单介绍 Golang 中配置可用 CPU 核的方法及其可能导致的误解。&lt;/p&gt;

&lt;h2 id=&quot;golang-在单核上的并发问题&quot;&gt;Golang 在单核上的“并发”问题&lt;/h2&gt;
&lt;h3 id=&quot;gotour上的乌龙案例&quot;&gt;gotour上的乌龙案例&lt;/h3&gt;
&lt;p&gt;在&lt;a href=&quot;/2019/05/12/golang-concurrency-03-map.html&quot;&gt;上一篇博客&lt;/a&gt;中介绍了 Golang 并发编程中 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 类型的“脆弱”性。具体地，Golang 的运行时（&lt;code class=&quot;highlighter-rouge&quot;&gt;runtime&lt;/code&gt;）会强校验并发读写的状态，如果发现有协程（&lt;code class=&quot;highlighter-rouge&quot;&gt;goroutine&lt;/code&gt;）读 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 同时有其他协程读或者写同一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;，程序就会直接异常退出。&lt;/p&gt;

&lt;p&gt;然而蹊跷的是，在 Golang 官方教程中，并发部分有一个示例（见&lt;a href=&quot;https://tour.golang.org/concurrency/9&quot;&gt;这里&lt;/a&gt;，需自备梯子）却并没有因为多个协程并发写同一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 变量而异常退出。示例的主要内容是通过一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; 锁来限定 &lt;code class=&quot;highlighter-rouge&quot;&gt;SafeCounter&lt;/code&gt; 结构体中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; 变量（&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;类型）的并发读写，其源码如下：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// SafeCounter is safe to use concurrently.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SafeCounter&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Inc increments the counter for the given key.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SafeCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Lock so only one goroutine at a time can access the map c.v.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Value returns the current value of the counter for the given key.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SafeCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Lock so only one goroutine at a time can access the map c.v.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SafeCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;somekey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;somekey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果去掉 &lt;code class=&quot;highlighter-rouge&quot;&gt;Inc&lt;/code&gt;  函数中 &lt;code class=&quot;highlighter-rouge&quot;&gt;mux&lt;/code&gt; 加锁与解锁的过程（如下面的代码所示），理论上示例代码会报出 &lt;code class=&quot;highlighter-rouge&quot;&gt;concurrent map writes&lt;/code&gt; 错误，但是如果登录&lt;a href=&quot;https://tour.golang.org/concurrency/9&quot;&gt;官方对应的 tour 页面&lt;/a&gt;，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;Inc&lt;/code&gt; 方法后运行却并未报出 &lt;strong&gt;并发写 map&lt;/strong&gt; 的错误（此结论截止到 2019/05/15，已经提了 issue，官方可能会做修复）&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// 修改后的 Inc 函数，此处去掉了锁相关的过程&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SafeCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;单个物理核心上的并发&quot;&gt;单个物理核心上的“并发”&lt;/h3&gt;
&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt; 只有单个物理核，Golang 运行时（&lt;code class=&quot;highlighter-rouge&quot;&gt;runtime&lt;/code&gt;）如何才能实现逻辑上的 &lt;strong&gt;“并发”&lt;/strong&gt; 呢？ 其实我们可以类比操作系统的多进程模型（参考《 &lt;a href=&quot;https://jingwei.link/2018/12/30/linux-process-thread-schedule.html&quot;&gt;Linux系统调度原理浅析&lt;/a&gt; 》和《 &lt;a href=&quot;https://jingwei.link/2019/02/13/linux-process-thread-schedule-2.html&quot;&gt;Linux系统调度原理浅析（二）&lt;/a&gt; 》），引入 时间片 的概念，把一个物理核的使用权按时间片划分并分配给所有的协程（&lt;code class=&quot;highlighter-rouge&quot;&gt;goroutine&lt;/code&gt;），每个协程消耗自己的时间片 &lt;strong&gt;轮流交替&lt;/strong&gt; 在同一个物理核上运行，从而实现逻辑上的 “并发”。&lt;/p&gt;

&lt;p&gt;其实这里面就涉及到一个问题，如果 Golang 代码运行时只被分配了一个物理核（比如宿主机只有一个物理核，或者通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.GOMAXPROCS(1)&lt;/code&gt;显式配置 Golang 进程只能使用一个核），那么是否就意味着 Golang 运行时（&lt;code class=&quot;highlighter-rouge&quot;&gt;runtime&lt;/code&gt;）对  &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 的读写都变成了顺序的从而避免了并发错误呢？&lt;/p&gt;

&lt;p&gt;目前来看，一个物理核的运行时配置确实会让 map 表现的不那么 “脆弱”。Golang 官方 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://tour.golang.org/concurrency/9&lt;/code&gt; 这个示例所运行的服务器很大概率默认添加了单个物理核的限制（可能考虑到节省资源），从而导致上面提到的乌龙示例。不过这里&lt;strong&gt;需要特别说明&lt;/strong&gt;一下，按照进程调度的基本原理，假设每个协程可以在任意过程被中断，理论上单个物理核上也可能会引发 map 的并发错误从而导致进程异常退出（因为 map 的读与写过程都很复杂，二者都不是原子性的），从这个角度配置单个核并不能保证 Go 线程安全（&lt;strong&gt;此项有待进一步确认&lt;/strong&gt;）。&lt;/p&gt;

&lt;p&gt;上面所提到的乌龙示例一般不会碰到，因为大部分的开发环境都是多核心的；不过如果开发环境是单核配置的虚拟机就会遇到了（我周围就有朋友用单核的虚拟机作为开发环境学习 Golang）。&lt;/p&gt;

&lt;h3 id=&quot;runtimegomaxprocs1-方法&quot;&gt;runtime.GOMAXPROCS(1) 方法&lt;/h3&gt;
&lt;p&gt;翻译官方对 &lt;code class=&quot;highlighter-rouge&quot;&gt;GOMAXPROCS&lt;/code&gt; 的描述：&lt;code class=&quot;highlighter-rouge&quot;&gt;GOMAXPROCS&lt;/code&gt; 可设置能够同时运行代码逻辑的最大 CPU 数量。&lt;/p&gt;

&lt;p&gt;在了解了单个 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt; 核心 对 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 类型变量的影响后，可能有的同学会考虑通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.GOMAXPROCS(1)&lt;/code&gt; 限制 Golang 应用可使用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt; 核心从而增加代码的健壮性——其实这种考虑是比较危险的。&lt;/p&gt;

&lt;p&gt;首先， &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 的读写过程都不是原子性的（原子性的概念参考《 &lt;a href=&quot;https://jingwei.link/2019/05/11/golang-concurrency-02.html&quot;&gt;浅谈 Golang 中数据的并发同步问题（二）&lt;/a&gt; 》中的阐述），这就导致读写过程可能被在任意过程中断，从而引发 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 的并发读写校验生效导致程序异常退出（&lt;strong&gt;这一条有待进一步确认 goroutine 的调度机制&lt;/strong&gt;）。其次，在低成本创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;goroutine&lt;/code&gt; 的编程模型中，单核心的配置可能造成逻辑死锁，比如下面的代码就会僵死：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;setup complete!&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GOMAXPROCS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;Golang 运行时默认会启用所有的 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt; 核心，可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.GOMAXPROCS()&lt;/code&gt; 方法配置可用的最大 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt;核心数量。当只有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt; 核的时候（比如虚拟机只配置了一个物理核，或者通过  &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.GOMAXPROCS(1)&lt;/code&gt; 配置只使用一个物理核），会对 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 类型变量的并发稳定性产生一些影响（不加锁的情况下也不会出现并发读写问题），但是&lt;strong&gt;开发者不应该依赖这个特性来试图增加代码的健壮性&lt;/strong&gt;，否则会造成无法预料的结果。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/12/30/linux-process-thread-schedule.html&quot;&gt;Linux系统调度原理浅析 - 敬维&lt;/a&gt;  简单介绍了 进程、线程、多线程模型、时间片以及调度等概念&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2019/02/13/linux-process-thread-schedule-2.html&quot;&gt;Linux系统调度原理浅析（二） - 敬维&lt;/a&gt; 简单介绍了 进程、线程、调度以及Goroutine的调度&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2019/05/11/golang-concurrency-02.html&quot;&gt;浅谈 Golang 中数据的并发同步问题（二） - 敬维&lt;/a&gt; 介绍了原子性&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://studygolang.com/articles/5025&quot;&gt;golang多核设置&lt;/a&gt; 介绍了 golang 的多核配置方法（&lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.GOMAXPROCS(1)&lt;/code&gt;）及示例&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 15 May 2019 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2019/05/15/golang-concurrency-04-single-core.html</link>
        <guid isPermaLink="true">https://jingwei.link/2019/05/15/golang-concurrency-04-single-core.html</guid>
        
        <category>golang</category>
        
        <category>实用</category>
        
        <category>基础</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>浅谈 Golang 中数据的并发同步问题（三）</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#golang-中-map-的使用&quot; id=&quot;markdown-toc-golang-中-map-的使用&quot;&gt;Golang 中 map 的使用&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#不允许并发读写的-map&quot; id=&quot;markdown-toc-不允许并发读写的-map&quot;&gt;不允许并发读写的 map&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#安全使用-map显而易见地加锁&quot; id=&quot;markdown-toc-安全使用-map显而易见地加锁&quot;&gt;安全使用 map——显而易见地加锁&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#为什么-map-并发读写时会在运行时异常退出&quot; id=&quot;markdown-toc-为什么-map-并发读写时会在运行时异常退出&quot;&gt;为什么 map 并发读写时会在运行时异常退出&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;过去 Web 开发的工作比较少涉及到并发的问题，每个用户请求在独立的线程里面进行，偶尔涉及到异步任务但是线程间数据同步模型非常简单，因此并未深入探究过并发这一块。最近在写游戏相关的服务端代码时发现数据的并发同步场景非常多，因此花了一点时间来探索。这是一个系列文章，本文为第三篇。&lt;/p&gt;

&lt;p&gt;本文简单介绍 Golang 中 map 类型的安全使用。&lt;/p&gt;

&lt;h2 id=&quot;golang-中-map-的使用&quot;&gt;Golang 中 map 的使用&lt;/h2&gt;
&lt;p&gt;在业务逻辑中保存 &lt;code class=&quot;highlighter-rouge&quot;&gt;key-value&lt;/code&gt; 是一个非常普遍的需求，因此 &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; 的使用场景非常多。&lt;/p&gt;

&lt;h3 id=&quot;不允许并发读写的-map&quot;&gt;不允许并发读写的 map&lt;/h3&gt;

&lt;p&gt;在 Golang 源码实现中对 map 的要求比较高（见《 &lt;a href=&quot;https://blog.golang.org/go-maps-in-action&quot;&gt;Go maps in action&lt;/a&gt;》）：&lt;code class=&quot;highlighter-rouge&quot;&gt;Maps are not safe for concurrent use: it's not defined what happens when you read and write to them simultaneously&lt;/code&gt;（当并发使用时 Maps 是不安全的，当并发地读写 map 的时候无法预知会发生啥 ）。&lt;/p&gt;

&lt;p&gt;如果不加保护地在不同的线程中读写 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 类型的数据，代码会直接崩溃并异常退出。比如下面的代码：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行上面的代码可以得到下面类似的结果：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go run map/main.go 
&lt;span class=&quot;c&quot;&gt;# fatal error: concurrent map read and map write&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ....(省略异常堆栈)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从输出结果来看，Golang 运行时明确禁止 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 的并发读写，且在检测到这种情况后直接异常退出。这不同于其他数据类型，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; 等，对比下面的代码（说明：下面的代码存在隐形的并发问题，具体参考《&lt;a href=&quot;/2019/05/11/golang-concurrency-02.html&quot;&gt;浅谈 Golang 中数据的并发同步问题（二）&lt;/a&gt;》）：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// 运行下面的代码并不会异常退出，不同于上面 map 类型的 m 的使用&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// go run main.go &lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次&lt;strong&gt;需要说明&lt;/strong&gt;，虽然上面的代码在不同的线程中访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; 类型的数据并未直接异常退出，但是这种不加任何安全措施的并发读写是存在安全风险的，具体参考《&lt;a href=&quot;/2019/05/11/golang-concurrency-02.html&quot;&gt;浅谈 Golang 中数据的并发同步问题（二）&lt;/a&gt;》。&lt;/p&gt;

&lt;h3 id=&quot;安全使用-map显而易见地加锁&quot;&gt;安全使用 map——显而易见地加锁&lt;/h3&gt;

&lt;p&gt;既然 Golang 在运行时不允许对 map 的并发读写，当需要在多个线程中读写 map 时，显而易见的方式是&lt;strong&gt;加锁&lt;/strong&gt;（如《&lt;a href=&quot;/2019/05/11/golang-concurrency-01.html&quot;&gt;浅谈 Golang 中数据的并发同步问题（一）&lt;/a&gt;》所描述的）。&lt;/p&gt;

&lt;p&gt;下面的代码把 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 类型的 &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; 封装在一个匿名的 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 中，同时整个匿名的 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 继承了 &lt;code class=&quot;highlighter-rouge&quot;&gt;sync.RWMutex&lt;/code&gt; 结构，因此拥有了 &lt;strong&gt;加读写锁&lt;/strong&gt; 的功能，从而安全地实现了多个线程对 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 的 “并发读写”：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RWMutex&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RUnlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;为什么-map-并发读写时会在运行时异常退出&quot;&gt;为什么 map 并发读写时会在运行时异常退出&lt;/h3&gt;

&lt;p&gt;最后提一下这个问题：&lt;strong&gt;为什么 int、string、slice 等变量在多个线程读写时运行正常，而 map 在多个线程并发读写时会运行时异常退出？&lt;/strong&gt; 其实这个涉及到 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 的具体实现（我知道这是一句废话 +_+）。&lt;/p&gt;

&lt;p&gt;简单来讲，可以从Go 源码中  &lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.12/src/runtime/map.go&quot;&gt;map 运行时相关的部分&lt;/a&gt; 窥见一些依据：&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 的增改删查可以分别对应到 &lt;code class=&quot;highlighter-rouge&quot;&gt;func mapassign()&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;func mapaccess1()&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;func mapdelete()&lt;/code&gt;这几个函数，每个函数都有非常长的执行逻辑；如果多个线程并发读写同一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;，大概率会出现 ① &lt;code class=&quot;highlighter-rouge&quot;&gt;mapassign&lt;/code&gt; 函数（增加某个 &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; 的值）执行到一半的时候 &lt;code class=&quot;highlighter-rouge&quot;&gt;mapaccess1&lt;/code&gt; 读取到一个相应的零值，②  &lt;code class=&quot;highlighter-rouge&quot;&gt;mapaccess1&lt;/code&gt; 函数（读取某个 &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; 的值）执行到一半的时候 &lt;code class=&quot;highlighter-rouge&quot;&gt;mapdelete&lt;/code&gt; 已经删除了对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;，等等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;同时&lt;/strong&gt;考虑到增删数据时底层数据的改变（比如扩容重分配，这一块还没深入研究，可以自行查看源码=。=），因此保持 map 的单纯变得很重要；为避免出现难以 debug 的异常，&lt;strong&gt;运行时环境显式地并发异常退出也就可以理解了。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;Golang 的运行时会&lt;strong&gt;在 map 的增改删查过程中检测是否有并发读写的情况，当发现并发读写时直接异常退出&lt;/strong&gt;。相对于其他数据类型（比如 int、string、slice 等），map 的并发使用是比较严苛的（安全&amp;amp;性能的折中）；可以认为 map 的这种严苛很大程度上降低了诡异 bug 的产生，增加代码的鲁棒性。&lt;/p&gt;

&lt;p&gt;最后，当提到 map 的并发使用时，很多时候会提到 &lt;code class=&quot;highlighter-rouge&quot;&gt;sync.Map&lt;/code&gt; 的使用，不过由于它大量使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;interface{}&lt;/code&gt; 类型，使用起来并不是那么方便；目前为止，&lt;strong&gt;我更喜欢加读写锁的方式&lt;/strong&gt;来使用 map 而不是使用线程安全的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sync.Map&lt;/code&gt; 😆&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2019/05/11/golang-concurrency-01.html&quot;&gt;浅谈 Golang 中数据的并发同步问题（一）&lt;/a&gt; 介绍通过加锁的方式保证线程安全&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2019/05/11/golang-concurrency-02.html&quot;&gt;浅谈 Golang 中数据的并发同步问题（二）&lt;/a&gt; 介绍了 atomic 包的使用及其局限性&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.golang.org/go-maps-in-action&quot;&gt;Go maps in action - The Go Blog&lt;/a&gt; 官方文档中介绍 map 的博客（需要自备梯子）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/10a998089486&quot;&gt;go语言坑之并发访问map&lt;/a&gt; 浅显易懂地介绍了 map 的坑及并发访问方法&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coolshell.cn/articles/9606.html&quot;&gt;疫苗：Java HashMap的死循环&lt;/a&gt; 了解 Java 中 HashMap 的实现机制，可以知道 Map 的线程不安全的实现是一个普遍现象&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.12/src/runtime/map.go&quot;&gt;src/runtime/map.go&lt;/a&gt; Go 源码中 map 相关的部分（运行时）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://golang.google.cn/pkg/sync/#Map&quot;&gt;sync - The Go Programming Language&lt;/a&gt; Golang 官方 sync 包中包含线程安全的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sync.Map&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/1d45e31343d8&quot;&gt;go map的线程安全使用&lt;/a&gt; 介绍了 &lt;code class=&quot;highlighter-rouge&quot;&gt;sync.Map&lt;/code&gt; 的使用&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 May 2019 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2019/05/12/golang-concurrency-03-map.html</link>
        <guid isPermaLink="true">https://jingwei.link/2019/05/12/golang-concurrency-03-map.html</guid>
        
        <category>golang</category>
        
        <category>实用</category>
        
        <category>基础</category>
        
        
        <category>golang</category>
        
      </item>
    
  </channel>
</rss>