<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>敬维</title>
    <description>一个喜欢涂涂画画的人，曾经的Rubist，一个CI/CD的践行者，一个探寻最佳实践的人。</description>
    <link>https://jingwei.link//</link>
    <atom:link href="https://jingwei.link/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 24 Mar 2024 09:50:59 +0800</pubDate>
    <lastBuildDate>Sun, 24 Mar 2024 09:50:59 +0800</lastBuildDate>
    <generator>Jekyll v4.3.3</generator>
    
      <item>
        <title>不写文章专注做视频，这里要荒废一段时间了</title>
        <description>&lt;h2 id=&quot;都是输出都挺开心&quot;&gt;都是输出，都挺开心&lt;/h2&gt;

&lt;p&gt;如题，最近一段时间迷上了做视频，因此这里要荒废一段时间了。&lt;/p&gt;

&lt;p&gt;其实无论是写文字还是做视频，于我而言都是一件挺开心的事情。而人活着最重要的是开心。&lt;/p&gt;

&lt;h2 id=&quot;视频链接&quot;&gt;视频链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;https://space.bilibili.com/425571569&lt;/a&gt;  B站个人页面&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 13 Sep 2020 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2020/09/13/what-iam-doing-now.html</link>
        <guid isPermaLink="true">https://jingwei.link/2020/09/13/what-iam-doing-now.html</guid>
        
        <category>课程</category>
        
        <category>基础</category>
        
        <category>实用</category>
        
        
        <category>视频</category>
        
      </item>
    
      <item>
        <title>《从0到1学习后端开发》之源码安装Python3及其HelloWorld的执行</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#python-的-hello-world&quot; id=&quot;markdown-toc-python-的-hello-world&quot;&gt;Python 的 hello world&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#简易版的-helloworld&quot; id=&quot;markdown-toc-简易版的-helloworld&quot;&gt;简易版的 helloworld&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#高级版-helloworld&quot; id=&quot;markdown-toc-高级版-helloworld&quot;&gt;高级版 helloworld&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;《从0到1学习后端开发》是面向在校大学生、非 IT 工作人员的免费后端开发入门实践教程，可至 &lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;https://space.bilibili.com/425571569&lt;/a&gt; 查看对应的视频资料。&lt;/p&gt;

&lt;h1 id=&quot;python-的-hello-world&quot;&gt;Python 的 hello world&lt;/h1&gt;

&lt;p&gt;基础决定最终可达到的高度。&lt;/p&gt;

&lt;p&gt;本节内容首先带着大家利用 ubuntu 原生的 python 进行简易版 helloworld 的编写与执行；然后带着大家按需安装特定版本的 python，并配置对应的开发环境。&lt;/p&gt;

&lt;h2 id=&quot;简易版的-helloworld&quot;&gt;简易版的 helloworld&lt;/h2&gt;

&lt;p&gt;在前面安装 vscode 的那一节我们已经编写过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; 的 helloworld。&lt;/p&gt;

&lt;p&gt;由于 ubuntu18.04 系统已经默认安装了 python3 解释器，因此可以很方便写出并运行 helloworld。简单讲分成几步：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建一个项目目录，比如我们在家目录下面使用命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; 创建对应的目录；然后通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code .&lt;/code&gt; 命令打开对应的目录作为工作目录。&lt;/li&gt;
  &lt;li&gt;检查 vscode 是否安装 Python 插件；&lt;/li&gt;
  &lt;li&gt;创建 helloworld.py 文件并编写内容 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print(&quot;hello world&quot;)&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;配置对应的解释器，可以直接执行输出结果。&lt;/li&gt;
  &lt;li&gt;也可以在命令行使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 helloworld.py&lt;/code&gt; 来执行对应的文件得出结果。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面简易版的 helloworld 直接使用了 ubuntu 系统默认带的 python3 环境，具体的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python 3.6.9&lt;/code&gt; 版本，版本比较老。另一方面，在我们实际项目的开发过程中，大部分会指定特定的 python 版本进行开发，这个时候就需要我们在我们的本地安装对应的版本，搭建匹配的开发环境。接下来就让我们看一下如何从源码安装特定版本的 python。&lt;/p&gt;

&lt;h2 id=&quot;高级版-helloworld&quot;&gt;高级版 helloworld&lt;/h2&gt;

&lt;p&gt;为什么提出“高阶版的 helloworld”呢？这是一个“基础决定最终可达到的高度”的问题；&lt;strong&gt;“要想楼层盖的高，就看地基打多牢”&lt;/strong&gt;，话糙理不糙。作为一名开发者，如果只会扎架子（比如动口只是架构、方案、设计模式），优雅而丰满的项目大厦是建不成的。不过很多人把扎好架子作为目标，不去关注基础上细节，因此丢失了很多乐趣，也限制了自己可达的高度，还是有点惋惜的。&lt;/p&gt;

&lt;p&gt;我们高阶版的 helloworld 希望可以给大家开一个好头，尝试从一个简单的 helloworld 里挖掘一些其他有意思的东西。&lt;/p&gt;

&lt;p&gt;接下来让我们安装特定版本的 python，比如选定 3.8.3 进行安装 。&lt;/p&gt;

&lt;p&gt;首先让我们下载 python3.8.3 的源码。无论是 python 还是 go，它们都是开源的语言，因此我们都是到它们的官网找到对应的源码的下载链接，相对其他一些地方的下载链接要靠谱很多。这里顺便建议大家平日里可以多逛官网，作为我们最重要的的一手资料进行学习。&lt;/p&gt;

&lt;p&gt;为了适应终端命令行，我们采用命令行的方式下载并安装。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先选择一个合适的目录，然后从官网找到对应的链接后复制，通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tgz&lt;/code&gt; 进行下载。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下载完成后得到的是一个为方便传输的压缩包，需要我们把它解压缩，通过在当前目录执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar -xzf Python-3.8.3.tgz&lt;/code&gt; 即可完成，在当前目录生成一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python-3.8.3&lt;/code&gt; 的目录。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我们可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code Python-3.8.3&lt;/code&gt; 来打开对应的目录，简单预览一下 python 的源码项目（源码阅读一般流程）。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;大概浏览一下，咦，发现 python 源码库里有好多 c 语言文件，可以知道 python 是基于 c 语言进行开发的，是不是很神奇 ^_^；&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;查看对应的 README，可以看到 源码库中有一个 README.rst 文件，查看一遍说了什么（英文学习多么重要啊）。我们目前只关注安装相关的内容，因此找到一段命令做参考，并看到有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure --help&lt;/code&gt;，那我们有必要探索一番。（在命令行环境多打 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt; 是一个好习惯）&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;其他的我们暂时不关注，先放着不管，不过可以看到原来一个牛x的项目是这个样子的。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure --help&lt;/code&gt; 查看配置项，然后通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure --prefix=$HOME/software/mypy&lt;/code&gt; 进行配置；也可以有选择地添加建议的参数，比如添加优化参数保证使用所有稳定的优化方案 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure --prefix=$HOME/software/mypy --enable-optimizations&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make install&lt;/code&gt; 来编译并安装源码。在整个过程中可能会有一些警告的提示或者错误的提示，静待看最后的总结报告。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装依赖（整个需要我们通过比较久的经验做积累才可以慢慢理解为什么需要这些依赖）。这里我积累了几个必要的，大家先安装一下。如果未来在项目开发过程中使用到了其他的依赖，则可以按照类似的步骤进行安装。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install zlib1g.dev&lt;/code&gt; 安装 zlib 依赖（整个是在安装 python 的时候就会需要）&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install libssl-dev&lt;/code&gt; 安装 ssl 依赖（编写 web 相关的服务的时候会用到）&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install libffi-dev&lt;/code&gt; 安装 libffi 依赖（当 pip install 的时候会用到）&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重新通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure --prefix=$HOME/software/mypy&lt;/code&gt; 来配置生成对应的 make 文件。并通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make install&lt;/code&gt; 编译安装。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装完成以后，就可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/software/mypy/bin/python3&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/software/mypy/bin/pip3&lt;/code&gt;把玩了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为了便利性，我们可以把新安装的 python 的 bin 目录添加到 PATH 中去，这样就可以直接使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3&lt;/code&gt; 命令了。具体地，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME/.bashrc&lt;/code&gt; 文件的最后添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export PATH=&quot;$HOME/software/mypy/bin:$PATH&quot;&lt;/code&gt;，然后重启终端或对应的服务即可。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;本小节介绍了 Python 的 helloworld，首先介绍利用 ubuntu 原带的 python 作为解释器，然后重点带大家安装自己的 python 解释器。并使用自己安装的解释器执行了 hellworld 脚本。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chalvern/books&quot;&gt;本系列课程教案库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;视频链接地址（视频课程8）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 24 May 2020 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2020/05/24/python-helloworld.html</link>
        <guid isPermaLink="true">https://jingwei.link/2020/05/24/python-helloworld.html</guid>
        
        <category>课程</category>
        
        <category>基础</category>
        
        <category>实用</category>
        
        
        <category>课程</category>
        
      </item>
    
      <item>
        <title>《从0到1学习后端开发》（3）Go、Java、Python语言模型对比</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#为什么是-python-和-go-这两门语言&quot; id=&quot;markdown-toc-为什么是-python-和-go-这两门语言&quot;&gt;为什么是 python 和 go 这两门语言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#简单对比gopythonjava的模型&quot; id=&quot;markdown-toc-简单对比gopythonjava的模型&quot;&gt;简单对比go/python/java的模型&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#go语言&quot; id=&quot;markdown-toc-go语言&quot;&gt;go语言&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#java-语言&quot; id=&quot;markdown-toc-java-语言&quot;&gt;java 语言&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#python-语言&quot; id=&quot;markdown-toc-python-语言&quot;&gt;python 语言&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#python-执行速度慢的三点原因&quot; id=&quot;markdown-toc-python-执行速度慢的三点原因&quot;&gt;python 执行速度慢的三点原因&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#对技术包括编程语言怀有敬畏之心&quot; id=&quot;markdown-toc-对技术包括编程语言怀有敬畏之心&quot;&gt;对技术（包括编程语言）怀有敬畏之心&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;《从0到1学习后端开发》是面向在校大学生、非 IT 工作人员的免费后端开发入门实践教程，可至 &lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;https://space.bilibili.com/425571569&lt;/a&gt; 查看对应的视频资料。&lt;/p&gt;

&lt;h2 id=&quot;为什么是-python-和-go-这两门语言&quot;&gt;为什么是 python 和 go 这两门语言&lt;/h2&gt;

&lt;p&gt;作为一个系列课程，可能有必要详尽地说明一下，为什么选择的是 python 和 go 这两门语言；有的同学可能更希望选定的是 java、Rust、C/C++ 等其他语言。&lt;/p&gt;

&lt;p&gt;在前面的课程里有提到过， python 是我目前工作的主要编程语言， go 是我曾经主力使用且一直跟踪其发展的编程语言。而且站在一个稍微有点经验的程序员的视角，&lt;strong&gt;不存在最好的语言，存在最适合的语言&lt;/strong&gt;。作为一名中高级的开发者，大家会发现自己平日里的工作所解决的困难都是业务相关的复杂度，编程语言的迁移（假如真的存在这种情况）相对反而会是比较容易的，只要团队里有比较靠谱的人带队，从入门到有产出花不了太多时间。&lt;/p&gt;

&lt;p&gt;不过，根据 &lt;a href=&quot;https://www.tiobe.com&quot;&gt;TIOBE&lt;/a&gt; 指数 java 依然是最流行的工业级编程语言，其热度长期占据排行榜首位，大家可以自行斟酌吧。&lt;/p&gt;

&lt;h2 id=&quot;简单对比gopythonjava的模型&quot;&gt;简单对比go/python/java的模型&lt;/h2&gt;

&lt;p&gt;在正式开始 python 和 go 的学习之前，让我们首先简单地比较一下几种编程语言的模型，这里我选择了比较有代表性的 go、python 和 java。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/004_why_python_and_go.png&quot; alt=&quot;几种编程语言的模型&quot; title=&quot;几种编程语言的模型&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们看一下各个编程语言“从源码到机器执行”所经历的环节。大家都是从源码开始，最终都是电脑的 CPU 和 内存来承载执行源码对应的逻辑。&lt;/p&gt;

&lt;p&gt;首先我先给大家注点鸡血，程序员写代码控制的主要是 CPU 和 内存，它们属于机器的一种；挖掘机或其他的车也是机器的一种，如果我们能够合理地摆弄那几个操纵杆学会开车，那么没有理由学不会开电脑。唯手熟尔，仅此而已。&lt;/p&gt;

&lt;h3 id=&quot;go语言&quot;&gt;go语言&lt;/h3&gt;
&lt;p&gt;让我们首先看一下 go 语言。&lt;/p&gt;

&lt;p&gt;go 诞生自 2009 年，和 python（1991）、java（1995）比起来算是一门比较新的语言，理论上具有后发优势，语言特性会比较先进。这也是建议大家学习它的一个原因。&lt;/p&gt;

&lt;p&gt;go 语言和 c 语言类似，经过编译后会生成可直接执行的二进制文件。图中使用“很快地编译“，是因为 go 语言编译起来非常快，这也是 go 语言涉及之处的一个目标；我们可以拿另一个比较新且流行的编程语言 Rust 简单对比，go 的编译速度比 rust 可以快一个数量级。举个例子，如果 Rust 项目编译使用 30 分钟（TiKV 项目），那么 go 语言复杂度相当的项目（TiDB）可能三分钟就构建完成了。&lt;/p&gt;

&lt;p&gt;go 编译生成的二进制文件可以直接被加载到机器上运行，也就是说，go 编译生成的二进制文件直接是机器可识别的内容(或者说，go 编译生成的汇编代码就是 CPU 指令集对应的代码)。这与 python 和 java 是完全不同的。&lt;/p&gt;

&lt;h3 id=&quot;java-语言&quot;&gt;java 语言&lt;/h3&gt;

&lt;p&gt;java 生态里非常引人注目的是 JVM（java virtual machine，java虚拟机）。对于虚拟机，大部分人的认知可能局限在 virtualBox、VMware 等，本课程最初也介绍了在虚拟机 virtualBox 上安装 Ubuntu 系统的具体步骤。我们可以把虚拟机认为是一种对硬件的抽象，基于我们电脑硬件的 CPU 的指令集，模拟出特定指令集合的计算单元。同样地，java 虚拟机也对硬件 CPU 和内存资源进行了抽象，而且抽象后可以运行 java 字节码。&lt;/p&gt;

&lt;p&gt;java 源码编译后生成 java 字节码，字节码由 java 虚拟机的指令集组成，可以在 JVM 平台执行。&lt;/p&gt;

&lt;p&gt;我们经常见到的 Jar 包和 War 包都是字节码文件包，是源码编译后的产物。相对 go 来说， java 的编译过程要慢很多，常常会让电脑卡顿好一会儿。&lt;/p&gt;

&lt;p&gt;简单讲，java 从源码到执行的过程是： 源码中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1+1&lt;/code&gt; 语句，首先被编译成为 JVM 的命令（字节码），然后字节码由 JVM 加载，并被 JVM 转义成为 CPU 的指令从而得以执行。CPU 运行 java 代码时，我们的 CPU ①一边做字节码到CPU指令的转义，②一边运行实际转义后的语句。相对于 go 语言只运行CPU指令的情况， java 的 CPU 使用效率会低一些。&lt;/p&gt;

&lt;p&gt;不过 java 作为一门工业级的编程语言，很多大牛为 JVM 的优化做了很多的事情，这也使得基于 JVM 的编程语言的运行效率与裸 CPU 的编程语言的运行效率差距没那么大了。因此，在 JVM 的平台上，还诞生了 kotlin 、Jython 这种编程语言，它们都是编译生成 JVM 指令集的字节码，然后在 JVM 上运行。&lt;/p&gt;

&lt;h3 id=&quot;python-语言&quot;&gt;python 语言&lt;/h3&gt;

&lt;p&gt;使用 python 开发，从源码到机器执行并没有显式地编译过程，只需把源码加载到解释器就可以正常运行了。&lt;/p&gt;

&lt;p&gt;就像前面提到的，类似 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1+1&lt;/code&gt; 这样的源码是不可能直接在 CPU 上执行的，那么 python 源码是如何运行在&lt;strong&gt;机器&lt;/strong&gt;上的呢？实际上 python 解释器会在内部把 python 源码编译形成 python 字节码，然后再把这些字节码加载到解释器的运行时（python 虚拟机）进行执行。&lt;/p&gt;

&lt;p&gt;除了“隐式编译”这个步骤，python 几乎与 java 是一样的。而且 python 解释器只会在第一次加载运行 python 源码的时候存在“隐式编译”这个步骤，并且把编译生成的 python 字节码保存为 .pyc 文件，再以后执行时会首先加载 pyc 文件，从而省去了重复编译的步骤。&lt;/p&gt;

&lt;p&gt;既然 python 与 java 类似，那么为什么我们经常听到大家讲“python运行速度慢”而很少听到“java执行速度慢”呢？这其实涉及到语言另外的问题。&lt;/p&gt;

&lt;h3 id=&quot;python-执行速度慢的三点原因&quot;&gt;python 执行速度慢的三点原因&lt;/h3&gt;

&lt;p&gt;首先应该科普一下：80%的业务还没跑到编程语言出现性能瓶颈就被淘汰了。因此有时候&lt;strong&gt;偏执&lt;/strong&gt;执行效率并不睿智，&lt;strong&gt;“不存在最好的语言，存在最适合的语言”&lt;/strong&gt;就是这个道理。&lt;/p&gt;

&lt;p&gt;① 首先看&lt;strong&gt;静态语言与动态语言&lt;/strong&gt;的区别。静态语言的类型检查在编译时进行，而动态语言的类型检查在运行时进行。java 是一种静态语言，其类型检查在我们编译 java 源码时就完成了；比如当有类型赋值错误时，会直接编译失败。而 python 是一种动态语言，其类型检查放在了运行时，因此会占用运行时的计算资源，导致执行速度慢。&lt;/p&gt;

&lt;p&gt;② 另一方面，为了便利性 python 的数据类型的粒度取的比较粗（比如整型不区分精度，可以表示任意大的值），而 CPU 固有的数据位（单次读写最大位数）有限，在转换过程中会存在性能损耗。&lt;/p&gt;

&lt;p&gt;③ python 在 1991 年诞生时，CPU 是单核的，因此语言模型对多核的支持不好。在 python 虚拟机（运行时）中，存在一个 GIL（Global interpreter lock，解释器全局锁），限制一个解释器同一时间只能转义一条字节码为机器码，无疑这会限制 python 对多核的使用。&lt;/p&gt;

&lt;h2 id=&quot;对技术包括编程语言怀有敬畏之心&quot;&gt;对技术（包括编程语言）怀有敬畏之心&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;对编程语言怀有敬畏之心;&lt;/li&gt;
  &lt;li&gt;对后端开发怀有敬畏之心；&lt;/li&gt;
  &lt;li&gt;对技术怀有敬畏之心；&lt;/li&gt;
  &lt;li&gt;对生活怀有敬畏之心。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;发现很多人因为各种原因忘了初心，达到某个水平后不再精进自己。希望我们都可以心怀敬畏，不断进取吧。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;本文简单介绍了　go、java、python 的语言模型。介绍了本系列课程选择 python 和 go 两种语言的理由。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chalvern/books&quot;&gt;本系列课程教案库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;视频链接地址（视频课程7）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 21 May 2020 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2020/05/21/go-java-python-language-model.html</link>
        <guid isPermaLink="true">https://jingwei.link/2020/05/21/go-java-python-language-model.html</guid>
        
        <category>课程</category>
        
        <category>基础</category>
        
        <category>实用</category>
        
        
        <category>课程</category>
        
      </item>
    
      <item>
        <title>《从0到1学习后端开发》（2）git安装、概念图解及简单使用</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#下载并安装-git&quot; id=&quot;markdown-toc-下载并安装-git&quot;&gt;下载并安装 git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#git-概论&quot; id=&quot;markdown-toc-git-概论&quot;&gt;Git 概论&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#git中的概念&quot; id=&quot;markdown-toc-git中的概念&quot;&gt;git中的概念&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#在-vscode-中使用-git&quot; id=&quot;markdown-toc-在-vscode-中使用-git&quot;&gt;在 vscode 中使用 git&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#通过图形界面实战&quot; id=&quot;markdown-toc-通过图形界面实战&quot;&gt;通过图形界面实战&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#通过命令行实战&quot; id=&quot;markdown-toc-通过命令行实战&quot;&gt;通过命令行实战&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;《从0到1学习后端开发》是面向在校大学生、非 IT 工作人员的免费后端开发入门实践教程，可至 &lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;https://space.bilibili.com/425571569&lt;/a&gt; 查看对应的视频资料。&lt;/p&gt;

&lt;h2 id=&quot;下载并安装-git&quot;&gt;下载并安装 git&lt;/h2&gt;

&lt;p&gt;在 ubuntu 中下载安装 git 还是比较简单的，&lt;/p&gt;

&lt;p&gt;我们可以打开 terminal 终端，首先敲击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; 命令，如果我们系统还没有安装 git， console 会提示我们“尚未安装 git”，并且给出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install git&lt;/code&gt; 的命令，这个时候我们只需要复制这条命令，然后粘贴到命令行执行就可以了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git 

&lt;span class=&quot;c&quot;&gt;# 下面就是长篇的安装输出提示，可能会要求我们输入 Y，输入即可&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完成之后， git 就可以作为我们的一个工具来使用了。&lt;/p&gt;

&lt;h2 id=&quot;git-概论&quot;&gt;Git 概论&lt;/h2&gt;

&lt;p&gt;对于一个完整的项目来说，可能包含了很多的模块，整体向外提供一套完整的服务。我们在项目的开发的过程中，可能会首先编写一个模块的代码，然后再开发另一个模块的代码。对于一个中大型的项目，甚至会不同的人负责不同的模块进行开发。&lt;/p&gt;

&lt;p&gt;在项目创建初期，各个模块之间的关联关系比较清晰，每个开发者的职责划分也比较清晰。不过为了更好地审视整个系统的功能，依然需要一个明确的方式来 review（审核） 代码。比如 模块（或类）A 的同事依赖调用 模块（或类）B 的接口，那么架构层面的负责人可能会同时查看两个模块的代码，从而保证各自的逻辑是恰当的。同时也要能够跟踪每条语句的作者，一方面可以记录贡献，另一方面在出现疑问或问题的时候也可以第一时间找到编码者进行答疑或修正。&lt;/p&gt;

&lt;p&gt;到功能迭代阶段，除去新的模块或类，一般还会修改已有的模块或类，这个时候就特别需要收集“老代码”的各种信息，比如作者、修改记录、注释、文档等；同时为了以后方便进一步迭代，需要留下当前的记录、注释、文档等。按照时间线把一次次变更详情记录下来，这就是 git 工具的核心功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/003_git_concepts_01.png&quot; alt=&quot;git概念&quot; title=&quot;Git概念图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图中，左边表示我们项目视角的结构图，每个方框表示一个模块，各个模块相互联系耦合到一起共同形成一个系统，整体向外提供服务；右边表示 git 的提交（commit）视图，一次次的提交形成一个可追溯、“有序”（当引入分支以后局部次序也会显得比较乱）的链条。&lt;/p&gt;

&lt;h2 id=&quot;git中的概念&quot;&gt;git中的概念&lt;/h2&gt;
&lt;p&gt;为了实现可追溯的链条，git 中包含了几个概念。&lt;/p&gt;

&lt;p&gt;大家可以看下面这张图，我们把上一张图里项目对应的 Git 仓库提交记录横过来展示了，现在左上角的这个躺着的是由一次次的提交记录组成的仓库。整个仓库直接保存在我们本地的磁盘上面，这个仓库可以来自于下面两种方式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/003_git_concepts_02.png&quot; alt=&quot;git命令图示&quot; title=&quot;Git命令及各环节流转&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;整个仓库可以来自于某个远端仓库，比如 github 里的 &lt;a href=&quot;https://github.com/chalver/book.git&quot;&gt;https://github.com/chalver/book.git&lt;/a&gt; 仓库，我们可以直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone remote-repository&lt;/code&gt; 到我们的本地；&lt;/li&gt;
  &lt;li&gt;除此之外呢我们也可以在我们的工作目录直接通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt; 命令初始化一个本地的仓库。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大家可以看到 workspace 就是我们正常编写内容的工作区域。当我们打开一个由 git 管理的项目的时候，里面可能已经包含了很多的代码，而且代码是以文件的形式分模块存在的。我们可能会在已有的某几个模块修改已有的函数或者提交几个新的函数，为了把我们修改的内容提交到 git 仓库，我们首先需要把我们的修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; 到 stage 暂存空间，我们可以每修改一点内容都 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; 到整个空间，从而为我们创建新的 commit 提交做准备。&lt;/p&gt;

&lt;p&gt;在 stage 空间，工作区域分散在各处的修改点被整合到一起。我们可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令查看 stage 空间里暂存的内容。&lt;/p&gt;

&lt;p&gt;当我们对工作区域的修改感到满意了，把内容全部添加到缓存区，那么我们就可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 来把我们的修改提交到本地仓库了。这里我们可以通过在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &quot;本次提交的内容&quot;&lt;/code&gt; 后添加注释来注明本地提交了什么内容。&lt;/p&gt;

&lt;p&gt;如果我们本地的仓库来自于一个远端仓库，或者我们本地初始化的仓库配置了对应的远端仓库，我们可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; 来把本地仓库的更新同步到远端仓库。&lt;/p&gt;

&lt;p&gt;当多人协作的时候，可能出现多人同时编写同一个仓库的情况，我们 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; 本地仓库的时候可能远端的仓库已经被别人更新过了，此时我们就没有办法 push 仓库了。不过这个时候我们可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; 来 merge 别人的更改，这样就可以继续 push 我们的代码到远端了。&lt;/p&gt;

&lt;p&gt;git 中还存在分支的概念，尤其在多人协作的时候尤其重要。不过这部分的内容比较复杂且对开发者的实践要求比较高，我会在后面的课程里再单独拎出来介绍。大家可以先尝试熟练掌握本节的内容。&lt;/p&gt;

&lt;h2 id=&quot;在-vscode-中使用-git&quot;&gt;在 vscode 中使用 git&lt;/h2&gt;

&lt;p&gt;vscode 天然集成了 git 环境，在安装 git 工具以后就可以通过左边的版本控制按钮来到对应的界面。&lt;/p&gt;

&lt;p&gt;我们可以通过 vscode 里提供的图形界面进行上面提到的各项操作，也可以在 vscode 的 terminal 里手动输入各个命令进行操作。&lt;/p&gt;

&lt;p&gt;我个人比较习惯通过命令行的方式操作，避免点错按钮（有的按钮挨着比较近，一个不小心可能导致自己丢失辛辛苦苦修改的内容）。大家可以根据喜好做选择，不过如果大家选择图形界面进行操作，建议大家多多练习一下，避免误操作导致不可挽回的损失=。=。&lt;/p&gt;

&lt;p&gt;大家可以通过查看 output 标签来查看图形界面每个操作的具体 git 命令，大家可以看到我们的一个按钮可能引发这么多的 git 命令的执行。里面有很多的命令可能是我们根本不会手动去敲的，因此不推荐大家去看它，不过在大家对 git 的感知到了某个境界以后，可以通过这里的内容进行探索，比如了解一下各个命令的实际作用，尝试打开另外一个世界的大门。&lt;/p&gt;

&lt;h3 id=&quot;通过图形界面实战&quot;&gt;通过图形界面实战&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;克隆 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/chalvern/books.git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;修改内容并添加到暂缓区&lt;/li&gt;
  &lt;li&gt;提交&lt;/li&gt;
  &lt;li&gt;推到远端&lt;/li&gt;
  &lt;li&gt;课堂展示2。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;通过命令行实战&quot;&gt;通过命令行实战&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://github.com/chalvern/books.git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &quot;add sth&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;课堂展示。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;本文简单介绍了 git 的安装与初级使用，可至 &lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;https://space.bilibili.com/425571569&lt;/a&gt; 查看对应的视频资料。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chalvern/books&quot;&gt;本系列课程教案库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;视频链接地址（视频课程6）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 17 May 2020 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2020/05/17/git-installation-and-usage.html</link>
        <guid isPermaLink="true">https://jingwei.link/2020/05/17/git-installation-and-usage.html</guid>
        
        <category>课程</category>
        
        <category>基础</category>
        
        <category>实用</category>
        
        
        <category>课程</category>
        
      </item>
    
      <item>
        <title>《从0到1学习后端开发》（1）搭建 Linux 环境</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#初衷&quot; id=&quot;markdown-toc-初衷&quot;&gt;初衷&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#假如目前的你处于下面描述的处境&quot; id=&quot;markdown-toc-假如目前的你处于下面描述的处境&quot;&gt;假如目前的你处于下面描述的处境&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#获取-linux-环境的三种方式&quot; id=&quot;markdown-toc-获取-linux-环境的三种方式&quot;&gt;获取 Linux 环境的三种方式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#虚拟机安装-linux-环境&quot; id=&quot;markdown-toc-虚拟机安装-linux-环境&quot;&gt;虚拟机安装 Linux 环境&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#windows-系统简单使用&quot; id=&quot;markdown-toc-windows-系统简单使用&quot;&gt;Windows 系统简单使用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#安装虚拟机-virtualbox&quot; id=&quot;markdown-toc-安装虚拟机-virtualbox&quot;&gt;安装虚拟机 virtualBox&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#下载-ubuntu-镜像&quot; id=&quot;markdown-toc-下载-ubuntu-镜像&quot;&gt;下载 Ubuntu 镜像&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#在-virtualbox-安装-ubuntu-系统&quot; id=&quot;markdown-toc-在-virtualbox-安装-ubuntu-系统&quot;&gt;在 virtualBox 安装 Ubuntu 系统&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ubuntu-系统熟悉&quot; id=&quot;markdown-toc-ubuntu-系统熟悉&quot;&gt;Ubuntu 系统熟悉&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;本文是《从0到1学习后端开发》的首篇教案文档。《从0到1学习后端开发》是面向在校大学生、非 IT 工作人员的免费后端开发入门实践教程，可至 &lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;https://space.bilibili.com/425571569&lt;/a&gt; 查看对应的视频资料。&lt;/p&gt;

&lt;h2 id=&quot;初衷&quot;&gt;初衷&lt;/h2&gt;
&lt;p&gt;这一小节我们尝试搭建 Linux 环境。&lt;/p&gt;

&lt;p&gt;之所以搭建 Linux 环境，主要是因为太多的人只接触过 Windows 系统，没有接触过甚至不知道有 Linux 操作系统这件事情。而在我的认知里，后端开发者的基本技能之一就应该是能够使用 Linux 做一些基础的事情，比如查看/编辑文件、安装/配置应用、搭建/维护某种开发环境，等等。&lt;/p&gt;

&lt;p&gt;更为重要的，后端开发者编写的代码大概率是部署在 Linux 服务器上面的，和 Linux 靠的越近，意味着与代码的运行环境越近，写出优质代码的概率更高，排查线上问题的能力也会更好。&lt;/p&gt;

&lt;p&gt;论证使用 Linux 的好处并不是本教程的重点，本教程会假设大家已经意识到这一点，并正在尝试寻找一套靠谱的教程入门后端开发，那么选择本套教程就对了。即使未来因为各种原因本套视频进行不下去，也可以私下联系我（&lt;a href=&quot;https://jingwei.link&quot;&gt;个人主页&lt;/a&gt;，发个邮件总会的吧=。=)讨论各种问题。&lt;/p&gt;

&lt;h2 id=&quot;假如目前的你处于下面描述的处境&quot;&gt;假如目前的你处于下面描述的处境&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;有一台安装了 Windows 系统的电脑（笔记本或者台式机）；如果已经有 Linux 系统安装在物理机上面，或者财力雄厚有苹果电脑（类 Unix 系统，和 Linux 有相同的祖上），都可以直接跳到后面的内容去。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;想要学习后端开发的知识，尤其指 python 或者 Go 语言；这两个语言前者学习比较简单，后者比较流行，而本人主要在这两个技术栈，因此选定它们两个。如果想学习其他的语言，考虑到知识的迁移性，学习 python 和 Go 也会对自己学习其他语言有所帮助。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自律（比如不怎么睡懒觉）；我奶奶经常教育我们几个孙辈们说，“如果什么都不想去做，那就什么都不会获得”。想要生活改变必须自己首先改变，想学习知识必须要付出或者牺牲一些东西，大道理这里不讲太多。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;到此，万事具备只欠一个 Linux 环境了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;获取-linux-环境的三种方式&quot;&gt;获取 Linux 环境的三种方式&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Linux 系统直接安装在物理机上面，就是说电脑开机后直接加载运行的就是 Linux 系统；&lt;/li&gt;
  &lt;li&gt;一个物理机上面安装了 Windows 系统和 Linux 系统（所谓的双系统）；&lt;/li&gt;
  &lt;li&gt;在虚拟机上安装 Linux 系统。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面的三种方式各有利弊，&lt;/p&gt;

&lt;p&gt;第一种意味着你下了很大的决心学习使用 Linux，并且与 Windows 系统生态下的各种绚丽的应用（包括游戏）说了再见。&lt;/p&gt;

&lt;p&gt;第二种意味着你花了很多时间调研安装双系统的细节，并且很可能因为某些操作失误格式化过磁盘（数据丢失）。&lt;/p&gt;

&lt;p&gt;第三种最简单，但是意味着你的机器配置足够高（至少两个核四个线程，且 4G 以上的内存），而且还要忍受速率慢的问题。&lt;/p&gt;

&lt;p&gt;鉴于前两种的牺牲比较大，而本系列课程定位是入门，因此默认大家按照第三种的方式进行学习，可以学习一定时间找到感觉以后再考虑另外两种方式。&lt;/p&gt;

&lt;h2 id=&quot;虚拟机安装-linux-环境&quot;&gt;虚拟机安装 Linux 环境&lt;/h2&gt;

&lt;h3 id=&quot;windows-系统简单使用&quot;&gt;Windows 系统简单使用&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;桌面整理，把用户文件夹调整出来放桌面上面；&lt;/li&gt;
  &lt;li&gt;查看系统配置；&lt;/li&gt;
  &lt;li&gt;安装/卸载软件；&lt;/li&gt;
  &lt;li&gt;调整启动项；&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;安装虚拟机-virtualbox&quot;&gt;安装虚拟机 virtualBox&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;下载 virtualBox 虚拟机；通过搜索引擎查找到官方网站的下载地址并下载安装包。&lt;/li&gt;
  &lt;li&gt;根据安装包进行安装。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;下载-ubuntu-镜像&quot;&gt;下载 Ubuntu 镜像&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;认识 Ubuntu 官网；&lt;/li&gt;
  &lt;li&gt;认识 “开源镜像站”；&lt;/li&gt;
  &lt;li&gt;下载 ubuntu-18.04 版本&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;在-virtualbox-安装-ubuntu-系统&quot;&gt;在 virtualBox 安装 Ubuntu 系统&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;新建实例，并配置；&lt;/li&gt;
  &lt;li&gt;安装界面；&lt;/li&gt;
  &lt;li&gt;启动&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ubuntu-系统熟悉&quot;&gt;Ubuntu 系统熟悉&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;启动关机按钮&lt;/li&gt;
  &lt;li&gt;基本信息&lt;/li&gt;
  &lt;li&gt;查看快捷方式，并打开 terminal&lt;/li&gt;
  &lt;li&gt;认识并调整设置 terminal 的快捷键&lt;/li&gt;
  &lt;li&gt;认识应用列表&lt;/li&gt;
  &lt;li&gt;认识软件商城，并安装一个软件（VLC）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;本节课程主要带领大家在虚拟机上面安装 Ubuntu（Linux）操作系统，可至 &lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;https://space.bilibili.com/425571569&lt;/a&gt; 查看对应的视频资料。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chalvern/books&quot;&gt;本系列课程教案库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://space.bilibili.com/425571569&quot;&gt;视频链接地址（视频课程1、2、3）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 16 May 2020 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2020/05/16/install-ubuntu-on-virtualbox.html</link>
        <guid isPermaLink="true">https://jingwei.link/2020/05/16/install-ubuntu-on-virtualbox.html</guid>
        
        <category>课程</category>
        
        <category>基础</category>
        
        <category>实用</category>
        
        
        <category>课程</category>
        
      </item>
    
      <item>
        <title>学习在一朝一夕，更在长长久久</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#坚持下去的理由与动力&quot; id=&quot;markdown-toc-坚持下去的理由与动力&quot;&gt;坚持下去的理由与动力&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#应该学什么&quot; id=&quot;markdown-toc-应该学什么&quot;&gt;应该学什么&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#如何坚持学习&quot; id=&quot;markdown-toc-如何坚持学习&quot;&gt;如何坚持学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;思考一下，我们在自己的技术栈里是否每天都有提升？&lt;/p&gt;

&lt;h2 id=&quot;坚持下去的理由与动力&quot;&gt;坚持下去的理由与动力&lt;/h2&gt;

&lt;p&gt;平时的生活里，不知不觉就懈怠了。&lt;/p&gt;

&lt;p&gt;可怕的是自己意识不到这种懈怠，甚至有时候还把“仰望星空/思考人生”作为懈怠的理由堂而皇之地颓废自己。&lt;/p&gt;

&lt;p&gt;如果我们接受自己一生平庸，那么生活处于懈怠的常态也无可厚非。但是大部分人对自己的生活都是有诉求的，而且在自己当前的诉求得到满足之后还会衍生出另外的诉求（人贪婪的本性）。&lt;/p&gt;

&lt;p&gt;有时候我就会感慨，如果之前的岁月里（每天/每周/每月/每年）做了某件事情，那么现在的自己该有多么厉害。这种感慨说明当前的自己知道了需要的技能，但是对当下状况的改善几乎无济于事。不过反过来想，&lt;strong&gt;如果能够预判到未来自己的短板或需要的技能，是不是现在就可以（每天/每周/每月/每年）做某件事情准备起来呢&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;那么未来的自己需要哪些技能？&lt;/p&gt;

&lt;h2 id=&quot;应该学什么&quot;&gt;应该学什么&lt;/h2&gt;

&lt;p&gt;如果知道自己需要的技能，并且清楚掌握这些技能所要学习的教材、书籍、文档等，技能的提升一般是很“迅猛”的。&lt;/p&gt;

&lt;p&gt;难点在于&lt;strong&gt;大部分时候我们不清楚自己需要什么技能&lt;/strong&gt;，不清楚应该学习哪本教材、书籍，不清楚应该阅读什么文档、源码。针对这种情况，笔者根据自己的经验总结出下面几个点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;想一想自己期望的营生方式，以及在这种营生方式下具体的工作内容是什么，从而确定自己所需技能的范畴领域；&lt;/li&gt;
  &lt;li&gt;确定技能领域后，①有条件的情况下锁定一个领路人（比如工作上以学徒的方式向有经验的人学习）②没有条件的情况下，从最基础的官方教程开始自行学习，这里强调以官方教程入手，避免被带偏；&lt;/li&gt;
  &lt;li&gt;坚持学习 10000+ 个小时。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;如何坚持学习&quot;&gt;如何坚持学习&lt;/h2&gt;

&lt;p&gt;阻碍学习的两个拦路障：一个是无知，也就是不知道自己应该学习什么（可以参照上一小节的内容）；另一个是懒惰——人的另一个本性。&lt;/p&gt;

&lt;p&gt;首先应该提一个老少皆宜的大道理：&lt;strong&gt;不努力学习，能力是不会稳定提升的；不持续学习，个人也会局限在某个特定的水平&lt;/strong&gt;。因此”如何坚持学习“就变成了如何克服懒惰的本性。&lt;/p&gt;

&lt;p&gt;根据经验，不妨从一个简单的习惯开始：比如坚持每天跑 1000 米，比如坚持每天做 20 个俯卧撑，比如坚持每天做 50 个仰卧起坐，再比如坚持每天温习一首古诗词，或者坚持每天背诵一个英文单词…… 坚持做一件简单又无聊的事情的价值是什么呢？除去身体素质和精神境界上的提升（哪怕是微弱的），还可以&lt;strong&gt;逐渐养成自律与坚持的品质&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;自律与坚持&lt;/strong&gt;在成年人世界里是两个非常稀缺的品质。如果想培养这两种品质，总要付出一些东西；可能是少放松几局游戏，可能是少仰望一会儿星空，还可能是少睡几刻钟……&lt;/p&gt;

&lt;p&gt;总之，耐心地磨时间吧。没有其他的捷径。&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Apr 2020 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2020/04/25/learning-is-long-journey.html</link>
        <guid isPermaLink="true">https://jingwei.link/2020/04/25/learning-is-long-journey.html</guid>
        
        <category>碎碎念</category>
        
        <category>基础</category>
        
        <category>实用</category>
        
        
        <category>碎碎念</category>
        
      </item>
    
      <item>
        <title>人生苦短，快用 Python</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-写在前面&quot; id=&quot;markdown-toc-1-写在前面&quot;&gt;1. 写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-编程语言是为业务场景服务的&quot; id=&quot;markdown-toc-2-编程语言是为业务场景服务的&quot;&gt;2. 编程语言是为业务场景服务的&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-静态语言与动态语言&quot; id=&quot;markdown-toc-21-静态语言与动态语言&quot;&gt;2.1 静态语言与动态语言&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#211-静态语言的编写-编译并链接-执行过程&quot; id=&quot;markdown-toc-211-静态语言的编写-编译并链接-执行过程&quot;&gt;2.1.1 静态语言的①编写-②编译并链接-③执行过程&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#212-动态语言的编写-解释执行过程&quot; id=&quot;markdown-toc-212-动态语言的编写-解释执行过程&quot;&gt;2.1.2 动态语言的①编写-②解释执行过程&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-人生苦短快用python&quot; id=&quot;markdown-toc-22-人生苦短快用python&quot;&gt;2.2 人生苦短，快用Python&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-小结&quot; id=&quot;markdown-toc-3-小结&quot;&gt;3 小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-写在前面&quot;&gt;1. 写在前面&lt;/h2&gt;

&lt;p&gt;从 &lt;a href=&quot;https://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt; 语言到 &lt;a href=&quot;https://golang.google.cn/&quot;&gt;Go&lt;/a&gt; 语言，目前终于开始使用 &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; 进行编码。&lt;/p&gt;

&lt;p&gt;对于&lt;strong&gt;职场新手&lt;/strong&gt;，可能首先会提出一个问题：难道 &lt;strong&gt;Ruby&lt;/strong&gt;/&lt;strong&gt;Go&lt;/strong&gt; 不香吗？难道 &lt;strong&gt;Python&lt;/strong&gt; 比其他两个语言好？其实都不是。如果我们认同&lt;strong&gt;“技术是为业务服务的”&lt;/strong&gt;这个论调，那么&lt;strong&gt;“编程语言应该为业务场景服务”&lt;/strong&gt;，仅此而已。&lt;/p&gt;

&lt;h2 id=&quot;2-编程语言是为业务场景服务的&quot;&gt;2. 编程语言是为业务场景服务的&lt;/h2&gt;

&lt;p&gt;根据业务场景选择合适的编程语言，使得当前场景的开发收益最大化。当用户量不是很多（机器没什么压力）而业务逻辑却比较繁杂（开发者编码有压力）的情况下，使用 Python 编码或许是一个较为明智的选择。&lt;/p&gt;

&lt;h3 id=&quot;21-静态语言与动态语言&quot;&gt;2.1 静态语言与动态语言&lt;/h3&gt;

&lt;p&gt;所谓静态语言，是指代码在编译的时候（简称&lt;strong&gt;编译时&lt;/strong&gt;）变量的类型就可以确定的语言，比如 C/C++、Java、Go、Object-C 等；所谓静态语言，是指代码在运行的时候（简称&lt;strong&gt;运行时&lt;/strong&gt;）变量的类型才可以确定的语言，比如 Python、Ruby、JavaScript、PHP、SQL等。&lt;/p&gt;

&lt;p&gt;进一步，所以&lt;strong&gt;编译时&lt;/strong&gt;，是指把代码文本转换为机器可执行文件的环境上下文，它会&lt;strong&gt;产出&lt;/strong&gt;一个机器可以执行的二进制文件。所谓&lt;strong&gt;运行时&lt;/strong&gt;，是指可执行的二进制文件在 CPU 上真实执行的上下文。&lt;/p&gt;

&lt;h4 id=&quot;211-静态语言的编写-编译并链接-执行过程&quot;&gt;2.1.1 静态语言的①编写-②编译并链接-③执行过程&lt;/h4&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// cat main.go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当我们使用 Go &lt;strong&gt;编写&lt;/strong&gt;业务逻辑（比如上面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello world&lt;/code&gt;代码）并执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go run main.go&lt;/code&gt; 的时候，Go 开发工具链隐含地帮我们首先&lt;strong&gt;编译并链接源码&lt;/strong&gt;生成可以执行的二进制文件，紧接着&lt;strong&gt;运行&lt;/strong&gt;这个二进制文件。也就是说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go run main.go&lt;/code&gt; 等效于 ①&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go build main.go&lt;/code&gt; + ②&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./mian&lt;/code&gt; 这两个命令操作。&lt;/p&gt;

&lt;p&gt;我们可以简单地认为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go build main.go&lt;/code&gt; 是 Go 代码的编译时，产物是一个可执行的二进制文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;；命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./main&lt;/code&gt; 是 Go 代码的运行时，此时我们编写的逻辑&lt;em&gt;开始&lt;/em&gt;在 CPU 上执行。&lt;/p&gt;

&lt;h4 id=&quot;212-动态语言的编写-解释执行过程&quot;&gt;2.1.2 动态语言的①编写-②解释执行过程&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# cat hello.py
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hello world&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当我们使用 Python &lt;strong&gt;编写&lt;/strong&gt;业务逻辑(比如上面的代码)，在执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python hello.py&lt;/code&gt; 的时候，Python 解释器直接帮我们&lt;strong&gt;解释并执行&lt;/strong&gt;业务逻辑。由于人与机器之间的隔阂，python 源码最终也要变成机器可以执行的代码；但是相对于静态语言，&lt;strong&gt;动态语言不存在编译后机器可执行的二进制产物&lt;/strong&gt;。换句话说，Python 的解释器一边编译源码，一边执行编译生成的代码。&lt;/p&gt;

&lt;h3 id=&quot;22-人生苦短快用python&quot;&gt;2.2 人生苦短，快用Python&lt;/h3&gt;

&lt;p&gt;仅仅缺省编译链接过程并不能成为选择动态语言 Python 的理由，原因很简单：但凡使用 Python 能够解决的问题，均可以使用其他非 Python 的方案解决。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;我们可以使用 Python 处理文件（重命名、修改内容），也可以使用 Go 或者 Java 等完成同样的任务；&lt;/li&gt;
  &lt;li&gt;我们可以使用 Python 处理表格数据，也可以使用 Go 或者 Java 等处理表格数据并达到同样的效果；&lt;/li&gt;
  &lt;li&gt;我们可以使用 Python 编写爬虫工具，也可以使用 GO 或者 Java 等实现爬虫工具；&lt;/li&gt;
  &lt;li&gt;我们可以使用 Python 编写 Web 服务，而使用 Go 或者 Java 等也可以编写 Web 服务甚至生态更完整；&lt;/li&gt;
  &lt;li&gt;我们可以使用 Python 实践 AI 算法，而其他的语言也可以完成类似的工作（只不过生态不如 Python）；&lt;/li&gt;
  &lt;li&gt;其他……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于上面的事实，并不存在必学 Python 的理由。可能 Python 只是一些细节上让完成上面列出的任务更简单，比如文件的读取、类型的转换（字符串与数字的互转）、序列号与反序列化（json字符串与json对象之间互转），等等；Python 语言本身封装了一些工具方法很容易地完成这些事情，而 Python 的第三方包进一步扩展了整个生态。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python 可以更简单地处理文件（重命名、修改内容），比如几行代码就可以实现文件的打开、读取、写入、关闭；&lt;/li&gt;
  &lt;li&gt;Python 可以更快地处理表格数据，比如可以方便地循环迭代每一行每一个格子，也可以很方便地对表格数据进行格式转换；&lt;/li&gt;
  &lt;li&gt;Python 可以更快地处理爬取到的数据，比如可以方便地把 json 字符串转换成为 json 对象进行进一步的处理；&lt;/li&gt;
  &lt;li&gt;Python 在 AI 算法实践领域几乎是霸权地位（因为那些懂算法的人更喜欢写 Python 代码），使得 Python 技术栈几乎包含了所有 AI 相关的算法；&lt;/li&gt;
  &lt;li&gt;其他……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于上面的考虑，其实可以尝试学一下 Python。&lt;/p&gt;

&lt;h2 id=&quot;3-小结&quot;&gt;3 小结&lt;/h2&gt;

&lt;p&gt;因为 Python 提供的一些便利性，当用户量不是很多（机器没什么压力）而业务逻辑却比较繁杂（开发者编码有压力）的情况下，使用 Python 编码是一个较为明智的选择：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;释放开发者把注意力放在业务逻辑的理解与梳理；&lt;/li&gt;
  &lt;li&gt;很容易地扩充编码队伍（容易培养或招纳新成员）.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 18 Apr 2020 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2020/04/18/use-python-quickly.html</link>
        <guid isPermaLink="true">https://jingwei.link/2020/04/18/use-python-quickly.html</guid>
        
        <category>python</category>
        
        <category>基础</category>
        
        <category>实用</category>
        
        
        <category>编程</category>
        
      </item>
    
      <item>
        <title>职场人士应该学什么以及学习方法（编码领域）</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#知识的不同层级&quot; id=&quot;markdown-toc-知识的不同层级&quot;&gt;知识的不同层级&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#自己应该学习什么&quot; id=&quot;markdown-toc-自己应该学习什么&quot;&gt;自己应该学习什么&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#知识的分类应该怎么学&quot; id=&quot;markdown-toc-知识的分类应该怎么学&quot;&gt;知识的分类（应该怎么学）&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;俗话说，“活到老学到老”。对程序员而言，尤其如此；或者说的严重一点，程序员唯有此一条路。然而，无论是职场新人还是职场老手，能够坚持学习的人却凤毛麟角。一方面是因为&lt;strong&gt;坚持学习&lt;/strong&gt;需要很强的毅力，而人有偷懒的劣根在；另一方面则是因为学习目标模糊，不知道该学什么，也不知道该怎么学。&lt;/p&gt;

&lt;p&gt;如果把坚持学习看做一个习惯，如何培养这个习惯本文不做讨论，大家可以先自行思考；本文只尝试分析知识的层级，从而便于我们认清&lt;strong&gt;自己应该学习什么以及应该怎么学习&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;知识的不同层级&quot;&gt;知识的不同层级&lt;/h2&gt;

&lt;p&gt;假设任何领域的知识分为不同的层级。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
（↑实践）
&lt;span class=&quot;c&quot;&gt;############################################################&lt;/span&gt;
L3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;domain knowlege&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     | L3-1 | L3-2  |  |  L3-3 | L3-4 | 
&lt;span class=&quot;c&quot;&gt;#########################|##############|##|##############|#&lt;/span&gt;
L2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;practice knowledge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  |    L2-1      |  |     L2-2     | 
&lt;span class=&quot;c&quot;&gt;############################################################&lt;/span&gt;
L1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;general knowlege&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###################################&lt;/span&gt;
L0（low-level knowledge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###########################&lt;/span&gt;
（↓理论）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;（某个领域的知识等级图）&lt;/p&gt;

&lt;p&gt;L0 代表&lt;strong&gt;底层基础层&lt;/strong&gt;，表示那些比较少涉及到的知识；L1 代表&lt;strong&gt;通用知识层&lt;/strong&gt;，表示只要涉及当前领域的工作就需要掌握的基础知识；L2 代表&lt;strong&gt;实践层&lt;/strong&gt;，这个层级的知识开始出现领域上的初步分化；L3 代表&lt;strong&gt;领域层&lt;/strong&gt;，包含更为专业的领域知识。越往下面越偏向理论，越往上面越偏向实践。直白地理解，越往下越接近课堂里学习到的知识，越往上越接近工作中用到的知识。&lt;/p&gt;

&lt;p&gt;作为一名编码者，理想情况下需要从 L0 到 L3 逐一训练自己的能力。但是在精力限制以及时间限制的情况下，无法顾全所有，只能有选择性地进行学习。&lt;/p&gt;

&lt;h3 id=&quot;自己应该学习什么&quot;&gt;自己应该学习什么&lt;/h3&gt;

&lt;p&gt;在讨论知识的时候，庄子曾讲“吾生也有涯，而知也无涯”，那么多知识根本学习不完；这对于学习者来说算是&lt;strong&gt;一个坏消息&lt;/strong&gt;。但是并不意味着放弃学习是一件睿智的选择（其实放弃学习是很愚蠢的选择），因为还有一个事实，解决工作上的实际问题并不需要所有的知识，有时候解决一个问题只需要掌握一小块知识就足够了；这对于学习者来说算是&lt;strong&gt;一个好消息&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;自己应该学习什么？如果目前工作中需要某个技能，但是自己不具备这个技能，投入时间精力学习吧！如果自己未来的工作中（工作转型）需要某个技能，但是自己目前不具备这个技能，也投入时间学习吧！&lt;/p&gt;

&lt;p&gt;如果自己不知道当前的工作需要哪个技能，也不知道自己未来的工作需要哪个技能，说明自己处于迷茫阶段，不妨尝试一些别的事情。对于非 IT 领域的同学，可以尝试学习一门编程语言；对于已经是 IT 领域的同学，可以尝试通读一下某个编程语言的手册文档；等等。&lt;/p&gt;

&lt;h3 id=&quot;知识的分类应该怎么学&quot;&gt;知识的分类（应该怎么学）&lt;/h3&gt;

&lt;p&gt;根据我的学习经历及工作经验，我发现基本上可以把知识分成下面几类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;死记硬背型的知识点（比如九九乘法口诀）&lt;/li&gt;
  &lt;li&gt;系统理论型的知识点（比如乘法竖列式）&lt;/li&gt;
  &lt;li&gt;一系列的知识点形成的领域栈只是（比如仅 python 技术栈包含了成百上千个知识点）&lt;/li&gt;
  &lt;li&gt;只有经历过才会有的知识（也就是一般所说的经验）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这四类里面，死记硬背型的知识点需要花费时间进行记忆，如果记忆力比较好短时间可以掌握；系统理论型的知识点主要凭借逻辑思维能力进行学习，如果理解能力好也可以短时间内掌握。但是接下来的&lt;strong&gt;领域栈知识和经验知识都需要时间上的打磨&lt;/strong&gt;，尤其经验，没有时间上的积累几乎是不可能有成绩的。&lt;/p&gt;

&lt;p&gt;如果读者朋友已结束学生时代并步入社会，或许已经意识到：很多聪明的小孩子认为凭借自己的聪明才智可以很容易地收获知识，从而不付出努力进行学习，这是一件愚蠢的行为。有的知识本就是耗精力耗时的性质，没有捷径真正掌握它。&lt;/p&gt;

&lt;p&gt;如果&lt;strong&gt;确认了自己应该学习的领域栈，不遗余力地学习这个领域栈的知识点，然后想尽一切办法实践这些知识点吧&lt;/strong&gt;！&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;本文属于理论上的罗列，希望读者反思自己学习的过程，理解为何有的知识学起来简单而有的知识学起来那么难，同时希望读者反思所学内容对自己职业生涯的意义。&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Apr 2020 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2020/04/05/learning-methodology.html</link>
        <guid isPermaLink="true">https://jingwei.link/2020/04/05/learning-methodology.html</guid>
        
        <category>基础</category>
        
        <category>实用</category>
        
        
        <category>编程</category>
        
      </item>
    
      <item>
        <title>如何为 Go 语言源码仓库贡献代码</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot; id=&quot;markdown-toc-写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#为-go-语言源码仓库贡献代码&quot; id=&quot;markdown-toc-为-go-语言源码仓库贡献代码&quot;&gt;为 Go 语言源码仓库贡献代码&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#我们往往忽略了官方材料的学习&quot; id=&quot;markdown-toc-我们往往忽略了官方材料的学习&quot;&gt;我们往往忽略了官方材料的学习&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#如何为-go-语言源码仓库贡献代码&quot; id=&quot;markdown-toc-如何为-go-语言源码仓库贡献代码&quot;&gt;如何为 Go 语言源码仓库贡献代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;二零一九年（2019）利用业余的时间做了一套&lt;a href=&quot;https://github.com/chalvern/books/tree/master/go/official_go_learning&quot;&gt;《原汁原味Go语言学习》&lt;/a&gt;的视频课程，主要涉及到 Go 官方的几个文档资料的学习。在翻译官方文档的过程中发现有一处错误（前前后后看了很多遍，每次看到都觉得不爽），调研后发现是 Go 源码仓库中的文档，于是心血来潮修正错误并提交了 commit，私心里还琢磨着如果代码被合并自己以后岂不就可以吹嘘是&lt;strong&gt;Go语言源码的贡献者&lt;/strong&gt;了？&lt;/p&gt;

&lt;p&gt;按照官方指引，春节放假前提交修正并得到管理员的正反馈，然后一直关注了好久但不见代码被合并，一度以为自己的这个提交被忽略了，不过最近看到已经被合并到了&lt;a href=&quot;https://github.com/golang/go/commit/34830beffa6396129bd9d9da58afb7a046775d49&quot;&gt;Go主分支&lt;/a&gt;。开心😸。&lt;/p&gt;

&lt;p&gt;其实整个提交过程还是比较流畅的，现在简单总结记录一下供自己以及他人参考。&lt;/p&gt;

&lt;h2 id=&quot;为-go-语言源码仓库贡献代码&quot;&gt;为 Go 语言源码仓库贡献代码&lt;/h2&gt;

&lt;h3 id=&quot;我们往往忽略了官方材料的学习&quot;&gt;我们往往忽略了官方材料的学习&lt;/h3&gt;

&lt;p&gt;由于每个人学习编程的方式不同，可能无法评估出编程的最佳学习方式；但是作为熟练程度的基准，语言的官方文档理应是其最佳的学习资料。以 Go 语言为例，可能市面上存在很多 Go 语言相关的书籍，但是任何一本书都无法让自己精通 Go 语言编程（如果有类似标榜的书籍，千万不要买）；从这个角度讲，书籍只能作为编程语言学习的指引者——激起学习者的学习热情，启发学习者的学习路径——其他的技术细节和技巧仍然需要学习者自己去探索体会。&lt;/p&gt;

&lt;p&gt;不过虽说编程语言的官方文档是最佳的学习资料，但是官方文档往往是枯燥无趣的，因此也难怪很多人都不喜欢读。可是，编程语言的学习与掌握本就是一个枯燥无趣的过程，又有什么办法……&lt;/p&gt;

&lt;h3 id=&quot;如何为-go-语言源码仓库贡献代码&quot;&gt;如何为 Go 语言源码仓库贡献代码&lt;/h3&gt;

&lt;p&gt;只需参考 《&lt;a href=&quot;https://golang.google.cn/doc/contribute.html&quot;&gt;Contribution Guide 官方文档&lt;/a&gt;》即可。&lt;/p&gt;

&lt;p&gt;大家可以看到整个文档都是英文资料，且在提交代码让别人审核的过程中也都是英文沟通交流，因此这里关键的点或许是把英文学好……&lt;/p&gt;

&lt;p&gt;从我个人的经验看，只要英文够好，确实发现了源码中不合理的地方，又觉得自己有好点子，都可以为 Go 语言贡献代码。为了破除大家对提交代码这件事情的神秘感，这里简单罗列一下&lt;a href=&quot;https://golang.google.cn/doc/contribute.html&quot;&gt;官方文档&lt;/a&gt;里介绍的几个点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先准备好账户并签署贡献者协议（Google账户、Gerrit账户）；&lt;/li&gt;
  &lt;li&gt;配置自己本地的环境（配置 git、配置 gerrit，后者是谷歌官方提供的一个小工具，可以保持自己的 commit 信息的规范）；&lt;/li&gt;
  &lt;li&gt;修改完代码后就可以使用 gerrit 提交了;&lt;/li&gt;
  &lt;li&gt;提交完成后到 https://go.googlesource.com/ 可以观察进度，甚至可能需要根据修改意见进行内容上的阐述、修改等；&lt;/li&gt;
  &lt;li&gt;等提交的内容被完全认同以后，剩下的就是耐心等着被合并到 Master 主分支了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;自己的代码被合并到主仓库，好像这份开心慢慢地也消散了。终于还是要踏踏实实地解决业务问题，如此自己的创造才是有价值的。&lt;/p&gt;

</description>
        <pubDate>Sun, 15 Mar 2020 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2020/03/15/contribute_golang_process.html</link>
        <guid isPermaLink="true">https://jingwei.link/2020/03/15/contribute_golang_process.html</guid>
        
        <category>golang</category>
        
        <category>最佳实践</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>更实用的 Go 开发的社区论坛——apollo 开源项目介绍</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#apollo-项目&quot; id=&quot;markdown-toc-apollo-项目&quot;&gt;apollo 项目&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#使用到的库或框架&quot; id=&quot;markdown-toc-使用到的库或框架&quot;&gt;使用到的库（或框架）&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#安装运行&quot; id=&quot;markdown-toc-安装运行&quot;&gt;安装运行&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#环境要求&quot; id=&quot;markdown-toc-环境要求&quot;&gt;环境要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#详细步骤&quot; id=&quot;markdown-toc-详细步骤&quot;&gt;详细步骤&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#其他资料&quot; id=&quot;markdown-toc-其他资料&quot;&gt;其他资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;apollo-项目&quot;&gt;apollo 项目&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chalvern/apollo&quot;&gt;apollo&lt;/a&gt; 项目的主体是一个 go 语言原生的 bbs 社区系统，主要为了弥补当前 go 语言原生社区系统的空白。在前后端分离盛行的今天，越来越多的技术细节被默认存在，无形中也就增加了初学者在这个技术栈的学习门槛。&lt;a href=&quot;https://github.com/chalvern/apollo&quot;&gt;apollo&lt;/a&gt; 项目专注在 go 技术栈，从命令行启动、配置读取，到数据库访问、html模板渲染，均直接采用了 go 对应的库；除了语言层面的学习，&lt;a href=&quot;https://github.com/chalvern/apollo&quot;&gt;apollo&lt;/a&gt; 项目还抽象了一些 web 设计中可能涉及的基本点，从而便于初学者未来了解设计更为宏大的项目。&lt;/p&gt;

&lt;p&gt;由于经验尚浅，再加上时间因素约束，项目中难免有一些不雅的设计，欢迎大家创建 issue 指出问题，并欢迎大家提交更为完善的代码。&lt;/p&gt;

&lt;p&gt;设计细节请查看 &lt;a href=&quot;https://github.com/chalvern/apollo/tree/master/wiki&quot;&gt;wiki&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;使用到的库或框架&quot;&gt;使用到的库（或框架）&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;web——&lt;a href=&quot;https://github.com/gin-gonic/gin&quot;&gt;gin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ORM——&lt;a href=&quot;https://github.com/jinzhu/gorm&quot;&gt;gorm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;日志——&lt;a href=&quot;https://github.com/uber-go/zap&quot;&gt;uber/zap&lt;/a&gt;/&lt;a href=&quot;https://github.com/chalvern/sugar&quot;&gt;sugar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;配置——&lt;a href=&quot;https://github.com/spf13/viper&quot;&gt;viper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;其他可参考 &lt;a href=&quot;../go.mod&quot;&gt;go.mod&lt;/a&gt; 文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;安装运行&quot;&gt;安装运行&lt;/h1&gt;

&lt;p&gt;apollo 是一个功能轻完备的项目，目前它已具备注册、登陆、注销、发帖、编辑、回复等功能，可以在一些简单应用场景下使用。可以到 http://www.jianzhoubian.com) 预览，测试好像只能使用 http 协议而不能使用 https 协议访问=。=&lt;/p&gt;

&lt;h2 id=&quot;环境要求&quot;&gt;环境要求&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;安装 go（version &amp;gt;= 1.13）&lt;/li&gt;
  &lt;li&gt;安装 MySQL（apollo 使用了 5.7.28 进行的开发)&lt;/li&gt;
  &lt;li&gt;（可选）安装 make (Linux 和 MacOS 上默认应该都有)，如果没有安装，则需要手动运行一些命令&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;详细步骤&quot;&gt;详细步骤&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;下载本仓库的代码(后面的操作都是在项目目录下执行)；&lt;/li&gt;
  &lt;li&gt;根据 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configs/config.yml.example&lt;/code&gt; 创建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configs/config.yml&lt;/code&gt; 文件；&lt;/li&gt;
  &lt;li&gt;根据 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configs/config.yml&lt;/code&gt; 中数据库（database）的配置，在 MySQL 中创建用户及数据库。下面以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apollo&lt;/code&gt; 为例&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 创建 apollo 数据库，默认字符集为 utf8mb4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`apollo`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`utf8mb4`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 创建用户名为 jingwei 密码为 20200101 的用户，并赋权 apollo 的所有权限给 jingwei&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apollo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jingwei&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;%&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;20200101&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;迁移数据表结构：&lt;/p&gt;

    &lt;p&gt;1.1 如果安装了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; 工具，直接运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make migrate&lt;/code&gt; 即可完成数据表的迁移。&lt;/p&gt;

    &lt;p&gt;1.2 如果没有安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; 工具，依次执行：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载依赖&lt;/span&gt;
go mod tidy
&lt;span class=&quot;c&quot;&gt;# 构建 apollo.exe 二进制执行文件&lt;/span&gt;
go build &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; apollo.exe main.go

&lt;span class=&quot;c&quot;&gt;# 执行迁移&lt;/span&gt;
./apollo.exe migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;通过命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./apollo.exe&lt;/code&gt; 运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apollo&lt;/code&gt; 项目。&lt;/li&gt;
  &lt;li&gt;通过浏览器访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:2020&lt;/code&gt; 即可看到对应的页面。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;其他资料&quot;&gt;其他资料&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/av86199253&quot;&gt;视频介绍&lt;/a&gt; 【原汁原味go语言学习】(14) 实践篇之 apollo 开源项目介绍&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 08 Feb 2020 00:00:00 +0800</pubDate>
        <link>https://jingwei.link/2020/02/08/appolo-go-web-blog.html</link>
        <guid isPermaLink="true">https://jingwei.link/2020/02/08/appolo-go-web-blog.html</guid>
        
        <category>golang</category>
        
        <category>实用</category>
        
        <category>最佳实践</category>
        
        
        <category>golang</category>
        
      </item>
    
  </channel>
</rss>